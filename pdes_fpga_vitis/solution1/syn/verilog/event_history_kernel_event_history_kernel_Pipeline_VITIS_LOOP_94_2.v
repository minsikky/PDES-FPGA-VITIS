// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module event_history_kernel_event_history_kernel_Pipeline_VITIS_LOOP_94_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_V,
        zext_ln1073,
        commit_time_V,
        removed_V_1_out_i,
        removed_V_1_out_o,
        removed_V_1_out_o_ap_vld,
        history_buffer_next_V_address0,
        history_buffer_next_V_ce0,
        history_buffer_next_V_we0,
        history_buffer_next_V_d0,
        history_buffer_next_V_q0,
        history_buffer_event_recv_time_V_address0,
        history_buffer_event_recv_time_V_ce0,
        history_buffer_event_recv_time_V_q0,
        history_free_head_V_i,
        history_free_head_V_o,
        history_free_head_V_o_ap_vld,
        history_lp_sizes_V_address0,
        history_lp_sizes_V_ce0,
        history_lp_sizes_V_we0,
        history_lp_sizes_V_d0,
        history_lp_sizes_V_q0,
        history_lp_heads_V_address0,
        history_lp_heads_V_ce0,
        history_lp_heads_V_we0,
        history_lp_heads_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] current_V;
input  [3:0] zext_ln1073;
input  [31:0] commit_time_V;
input  [15:0] removed_V_1_out_i;
output  [15:0] removed_V_1_out_o;
output   removed_V_1_out_o_ap_vld;
output  [5:0] history_buffer_next_V_address0;
output   history_buffer_next_V_ce0;
output   history_buffer_next_V_we0;
output  [15:0] history_buffer_next_V_d0;
input  [15:0] history_buffer_next_V_q0;
output  [5:0] history_buffer_event_recv_time_V_address0;
output   history_buffer_event_recv_time_V_ce0;
input  [31:0] history_buffer_event_recv_time_V_q0;
input  [15:0] history_free_head_V_i;
output  [15:0] history_free_head_V_o;
output   history_free_head_V_o_ap_vld;
output  [5:0] history_lp_sizes_V_address0;
output   history_lp_sizes_V_ce0;
output   history_lp_sizes_V_we0;
output  [15:0] history_lp_sizes_V_d0;
input  [15:0] history_lp_sizes_V_q0;
output  [5:0] history_lp_heads_V_address0;
output   history_lp_heads_V_ce0;
output   history_lp_heads_V_we0;
output  [15:0] history_lp_heads_V_d0;

reg ap_idle;
reg[15:0] removed_V_1_out_o;
reg removed_V_1_out_o_ap_vld;
reg[5:0] history_buffer_next_V_address0;
reg history_buffer_next_V_ce0;
reg history_buffer_next_V_we0;
reg[15:0] history_buffer_next_V_d0;
reg history_buffer_event_recv_time_V_ce0;
reg[15:0] history_free_head_V_o;
reg history_free_head_V_o_ap_vld;
reg history_lp_sizes_V_ce0;
reg history_lp_sizes_V_we0;
reg history_lp_heads_V_ce0;
reg history_lp_heads_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1069_fu_149_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [15:0] current_V_5_reg_240;
reg   [5:0] history_lp_heads_V_addr_reg_246;
reg   [5:0] history_lp_sizes_V_addr_reg_251;
reg   [0:0] icmp_ln1069_reg_256;
reg   [5:0] history_buffer_next_V_addr_reg_260;
reg   [15:0] current_V_6_reg_270;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [0:0] icmp_ln1085_fu_161_p2;
reg   [0:0] icmp_ln1085_reg_275;
wire   [63:0] zext_ln1073_cast_fu_130_p1;
wire   [63:0] zext_ln587_2_fu_155_p1;
wire   [63:0] zext_ln587_3_fu_175_p1;
wire   [0:0] icmp_ln1065_fu_169_p2;
wire   [15:0] removed_V_fu_184_p2;
reg   [15:0] current_V_1_fu_44;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_current_V_5;
reg   [15:0] prev_V_fu_48;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

event_history_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
        current_V_1_fu_44 <= current_V;
    end else if (((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        current_V_1_fu_44 <= current_V_6_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
        prev_V_fu_48 <= 16'd65535;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1085_fu_161_p2 == 1'd1))) begin
        prev_V_fu_48 <= current_V_5_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        current_V_5_reg_240 <= ap_sig_allocacmp_current_V_5;
        history_lp_heads_V_addr_reg_246[3 : 0] <= zext_ln1073_cast_fu_130_p1[3 : 0];
        history_lp_sizes_V_addr_reg_251[3 : 0] <= zext_ln1073_cast_fu_130_p1[3 : 0];
        icmp_ln1069_reg_256 <= icmp_ln1069_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        current_V_6_reg_270 <= history_buffer_next_V_q0;
        icmp_ln1085_reg_275 <= icmp_ln1085_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1069_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        history_buffer_next_V_addr_reg_260 <= zext_ln587_2_fu_155_p1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln1069_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_current_V_5 = current_V;
    end else begin
        ap_sig_allocacmp_current_V_5 = current_V_1_fu_44;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        history_buffer_event_recv_time_V_ce0 = 1'b1;
    end else begin
        history_buffer_event_recv_time_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0))) begin
        history_buffer_next_V_address0 = history_buffer_next_V_addr_reg_260;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1065_fu_169_p2 == 1'd0) & (icmp_ln1085_fu_161_p2 == 1'd0))) begin
        history_buffer_next_V_address0 = zext_ln587_3_fu_175_p1;
    end else if (((icmp_ln1069_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        history_buffer_next_V_address0 = zext_ln587_2_fu_155_p1;
    end else begin
        history_buffer_next_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln1065_fu_169_p2 == 1'd0) & (icmp_ln1085_fu_161_p2 == 1'd0)) | ((icmp_ln1069_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0)))) begin
        history_buffer_next_V_ce0 = 1'b1;
    end else begin
        history_buffer_next_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0))) begin
        history_buffer_next_V_d0 = history_free_head_V_i;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1065_fu_169_p2 == 1'd0) & (icmp_ln1085_fu_161_p2 == 1'd0))) begin
        history_buffer_next_V_d0 = history_buffer_next_V_q0;
    end else begin
        history_buffer_next_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln1065_fu_169_p2 == 1'd0) & (icmp_ln1085_fu_161_p2 == 1'd0)) | ((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0)))) begin
        history_buffer_next_V_we0 = 1'b1;
    end else begin
        history_buffer_next_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0))) begin
        history_free_head_V_o = current_V_5_reg_240;
    end else begin
        history_free_head_V_o = history_free_head_V_i;
    end
end

always @ (*) begin
    if (((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0))) begin
        history_free_head_V_o_ap_vld = 1'b1;
    end else begin
        history_free_head_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        history_lp_heads_V_ce0 = 1'b1;
    end else begin
        history_lp_heads_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1065_fu_169_p2 == 1'd1) & (icmp_ln1085_fu_161_p2 == 1'd0))) begin
        history_lp_heads_V_we0 = 1'b1;
    end else begin
        history_lp_heads_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln1085_fu_161_p2 == 1'd0)) | ((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0)))) begin
        history_lp_sizes_V_ce0 = 1'b1;
    end else begin
        history_lp_sizes_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1085_reg_275 == 1'd0))) begin
        history_lp_sizes_V_we0 = 1'b1;
    end else begin
        history_lp_sizes_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1085_fu_161_p2 == 1'd0))) begin
        removed_V_1_out_o = removed_V_fu_184_p2;
    end else begin
        removed_V_1_out_o = removed_V_1_out_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1085_fu_161_p2 == 1'd0))) begin
        removed_V_1_out_o_ap_vld = 1'b1;
    end else begin
        removed_V_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln1069_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign history_buffer_event_recv_time_V_address0 = zext_ln587_2_fu_155_p1;

assign history_lp_heads_V_address0 = history_lp_heads_V_addr_reg_246;

assign history_lp_heads_V_d0 = history_buffer_next_V_q0;

assign history_lp_sizes_V_address0 = history_lp_sizes_V_addr_reg_251;

assign history_lp_sizes_V_d0 = ($signed(history_lp_sizes_V_q0) + $signed(16'd65535));

assign icmp_ln1065_fu_169_p2 = ((prev_V_fu_48 == 16'd65535) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_149_p2 = ((ap_sig_allocacmp_current_V_5 == 16'd65535) ? 1'b1 : 1'b0);

assign icmp_ln1085_fu_161_p2 = (($signed(history_buffer_event_recv_time_V_q0) > $signed(commit_time_V)) ? 1'b1 : 1'b0);

assign removed_V_fu_184_p2 = (removed_V_1_out_i + 16'd1);

assign zext_ln1073_cast_fu_130_p1 = zext_ln1073;

assign zext_ln587_2_fu_155_p1 = ap_sig_allocacmp_current_V_5;

assign zext_ln587_3_fu_175_p1 = prev_V_fu_48;

always @ (posedge ap_clk) begin
    history_lp_heads_V_addr_reg_246[5:4] <= 2'b00;
    history_lp_sizes_V_addr_reg_251[5:4] <= 2'b00;
end

endmodule //event_history_kernel_event_history_kernel_Pipeline_VITIS_LOOP_94_2
