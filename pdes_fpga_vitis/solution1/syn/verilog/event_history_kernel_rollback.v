// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module event_history_kernel_rollback (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lp_id,
        to_time,
        history_lp_heads_V_address0,
        history_lp_heads_V_ce0,
        history_lp_heads_V_we0,
        history_lp_heads_V_d0,
        history_lp_heads_V_q0,
        history_buffer_event_recv_time_V_address0,
        history_buffer_event_recv_time_V_ce0,
        history_buffer_event_recv_time_V_q0,
        history_buffer_event_send_time_V_address0,
        history_buffer_event_send_time_V_ce0,
        history_buffer_event_send_time_V_q0,
        history_buffer_event_data_V_address0,
        history_buffer_event_data_V_ce0,
        history_buffer_event_data_V_q0,
        history_buffer_event_sender_id_V_address0,
        history_buffer_event_sender_id_V_ce0,
        history_buffer_event_sender_id_V_q0,
        history_buffer_event_receiver_id_V_address0,
        history_buffer_event_receiver_id_V_ce0,
        history_buffer_event_receiver_id_V_q0,
        history_buffer_event_is_anti_message_V_address0,
        history_buffer_event_is_anti_message_V_ce0,
        history_buffer_event_is_anti_message_V_q0,
        history_buffer_next_V_address0,
        history_buffer_next_V_ce0,
        history_buffer_next_V_we0,
        history_buffer_next_V_d0,
        history_buffer_next_V_q0,
        history_free_head_V_i,
        history_free_head_V_o,
        history_free_head_V_o_ap_vld,
        history_lp_sizes_V_address0,
        history_lp_sizes_V_ce0,
        history_lp_sizes_V_we0,
        history_lp_sizes_V_d0,
        history_lp_sizes_V_q0,
        history_total_size_V_i,
        history_total_size_V_o,
        history_total_size_V_o_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] lp_id;
input  [31:0] to_time;
output  [5:0] history_lp_heads_V_address0;
output   history_lp_heads_V_ce0;
output   history_lp_heads_V_we0;
output  [15:0] history_lp_heads_V_d0;
input  [15:0] history_lp_heads_V_q0;
output  [5:0] history_buffer_event_recv_time_V_address0;
output   history_buffer_event_recv_time_V_ce0;
input  [31:0] history_buffer_event_recv_time_V_q0;
output  [5:0] history_buffer_event_send_time_V_address0;
output   history_buffer_event_send_time_V_ce0;
input  [31:0] history_buffer_event_send_time_V_q0;
output  [5:0] history_buffer_event_data_V_address0;
output   history_buffer_event_data_V_ce0;
input  [31:0] history_buffer_event_data_V_q0;
output  [5:0] history_buffer_event_sender_id_V_address0;
output   history_buffer_event_sender_id_V_ce0;
input  [15:0] history_buffer_event_sender_id_V_q0;
output  [5:0] history_buffer_event_receiver_id_V_address0;
output   history_buffer_event_receiver_id_V_ce0;
input  [15:0] history_buffer_event_receiver_id_V_q0;
output  [5:0] history_buffer_event_is_anti_message_V_address0;
output   history_buffer_event_is_anti_message_V_ce0;
input  [0:0] history_buffer_event_is_anti_message_V_q0;
output  [5:0] history_buffer_next_V_address0;
output   history_buffer_next_V_ce0;
output   history_buffer_next_V_we0;
output  [15:0] history_buffer_next_V_d0;
input  [15:0] history_buffer_next_V_q0;
input  [15:0] history_free_head_V_i;
output  [15:0] history_free_head_V_o;
output   history_free_head_V_o_ap_vld;
output  [5:0] history_lp_sizes_V_address0;
output   history_lp_sizes_V_ce0;
output   history_lp_sizes_V_we0;
output  [15:0] history_lp_sizes_V_d0;
input  [15:0] history_lp_sizes_V_q0;
input  [15:0] history_total_size_V_i;
output  [15:0] history_total_size_V_o;
output   history_total_size_V_o_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] history_lp_heads_V_address0;
reg history_lp_heads_V_ce0;
reg history_lp_heads_V_we0;
reg history_buffer_event_recv_time_V_ce0;
reg history_buffer_event_send_time_V_ce0;
reg history_buffer_event_data_V_ce0;
reg history_buffer_event_sender_id_V_ce0;
reg history_buffer_event_receiver_id_V_ce0;
reg history_buffer_event_is_anti_message_V_ce0;
reg history_buffer_next_V_ce0;
reg history_buffer_next_V_we0;
reg[15:0] history_free_head_V_o;
reg history_free_head_V_o_ap_vld;
reg history_lp_sizes_V_ce0;
reg history_lp_sizes_V_we0;
reg[15:0] history_total_size_V_o;
reg history_total_size_V_o_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] event_queue_size_V;
reg   [6:0] event_queue_heap_send_time_V_address0;
reg    event_queue_heap_send_time_V_ce0;
reg    event_queue_heap_send_time_V_we0;
reg   [31:0] event_queue_heap_send_time_V_d0;
wire   [31:0] event_queue_heap_send_time_V_q0;
reg   [6:0] event_queue_heap_recv_time_V_address0;
reg    event_queue_heap_recv_time_V_ce0;
reg    event_queue_heap_recv_time_V_we0;
reg   [31:0] event_queue_heap_recv_time_V_d0;
wire   [31:0] event_queue_heap_recv_time_V_q0;
reg   [6:0] event_queue_heap_data_V_address0;
reg    event_queue_heap_data_V_ce0;
reg    event_queue_heap_data_V_we0;
reg   [31:0] event_queue_heap_data_V_d0;
wire   [31:0] event_queue_heap_data_V_q0;
reg   [6:0] event_queue_heap_sender_id_V_address0;
reg    event_queue_heap_sender_id_V_ce0;
reg    event_queue_heap_sender_id_V_we0;
reg   [15:0] event_queue_heap_sender_id_V_d0;
wire   [15:0] event_queue_heap_sender_id_V_q0;
reg   [6:0] event_queue_heap_receiver_id_V_address0;
reg    event_queue_heap_receiver_id_V_ce0;
reg    event_queue_heap_receiver_id_V_we0;
reg   [15:0] event_queue_heap_receiver_id_V_d0;
wire   [15:0] event_queue_heap_receiver_id_V_q0;
reg   [6:0] event_queue_heap_is_anti_message_V_address0;
reg    event_queue_heap_is_anti_message_V_ce0;
reg    event_queue_heap_is_anti_message_V_we0;
reg   [0:0] event_queue_heap_is_anti_message_V_d0;
wire   [0:0] event_queue_heap_is_anti_message_V_q0;
reg   [5:0] history_lp_heads_V_addr_reg_520;
reg   [5:0] history_lp_sizes_V_addr_reg_525;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1069_fu_387_p2;
reg   [0:0] icmp_ln1069_reg_538;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln587_1_fu_393_p1;
reg   [63:0] zext_ln587_1_reg_542;
reg   [31:0] temp_recv_time_V_reg_557;
wire    ap_CS_fsm_state4;
reg   [7:0] index_V_reg_566;
wire   [0:0] icmp_ln1081_fu_398_p2;
wire   [6:0] trunc_ln1077_fu_407_p1;
reg   [6:0] trunc_ln1077_reg_571;
wire   [0:0] tmp_fu_411_p3;
reg   [31:0] temp_send_time_V_reg_609;
wire    ap_CS_fsm_state5;
reg   [31:0] temp_data_V_reg_614;
reg   [15:0] temp_sender_id_V_reg_619;
reg   [15:0] temp_receiver_id_V_reg_624;
reg   [0:0] temp_is_anti_message_V_reg_629;
wire   [0:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_return;
reg   [0:0] targetBlock_reg_634;
wire    ap_CS_fsm_state7;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_done;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_idle;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_ready;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_1_out;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_1_out_ap_vld;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_3_out;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_3_out_ap_vld;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_address0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_ce0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_we0;
wire   [31:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_d0;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_address0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_ce0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_we0;
wire   [31:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_d0;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_address0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_ce0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_we0;
wire   [31:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_d0;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_address0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_ce0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_we0;
wire   [15:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_d0;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_address0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_ce0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_we0;
wire   [15:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_d0;
wire   [6:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_address0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_ce0;
wire    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_we0;
wire   [0:0] grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_d0;
reg   [0:0] retval_0_reg_340;
reg    grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start_reg;
wire    ap_CS_fsm_state6;
reg   [6:0] index_V_1_loc_fu_76;
reg   [6:0] index_V_3_loc_fu_72;
wire   [63:0] zext_ln587_fu_373_p1;
wire   [63:0] zext_ln587_2_fu_457_p1;
wire   [63:0] zext_ln587_3_fu_491_p1;
wire    ap_CS_fsm_state8;
wire   [7:0] add_ln886_fu_419_p2;
wire   [15:0] add_ln887_1_fu_445_p2;
reg   [15:0] current_V_1_fu_68;
wire   [6:0] index_V_4_fu_484_p3;
reg   [0:0] ap_return_preg;
wire    ap_CS_fsm_state9;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_condition_281;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 event_queue_size_V = 8'd0;
#0 grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start_reg = 1'b0;
#0 ap_return_preg = 1'd0;
end

event_history_kernel_rollback_event_queue_heap_send_time_V_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
event_queue_heap_send_time_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(event_queue_heap_send_time_V_address0),
    .ce0(event_queue_heap_send_time_V_ce0),
    .we0(event_queue_heap_send_time_V_we0),
    .d0(event_queue_heap_send_time_V_d0),
    .q0(event_queue_heap_send_time_V_q0)
);

event_history_kernel_rollback_event_queue_heap_send_time_V_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
event_queue_heap_recv_time_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(event_queue_heap_recv_time_V_address0),
    .ce0(event_queue_heap_recv_time_V_ce0),
    .we0(event_queue_heap_recv_time_V_we0),
    .d0(event_queue_heap_recv_time_V_d0),
    .q0(event_queue_heap_recv_time_V_q0)
);

event_history_kernel_rollback_event_queue_heap_send_time_V_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
event_queue_heap_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(event_queue_heap_data_V_address0),
    .ce0(event_queue_heap_data_V_ce0),
    .we0(event_queue_heap_data_V_we0),
    .d0(event_queue_heap_data_V_d0),
    .q0(event_queue_heap_data_V_q0)
);

event_history_kernel_rollback_event_queue_heap_sender_id_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
event_queue_heap_sender_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(event_queue_heap_sender_id_V_address0),
    .ce0(event_queue_heap_sender_id_V_ce0),
    .we0(event_queue_heap_sender_id_V_we0),
    .d0(event_queue_heap_sender_id_V_d0),
    .q0(event_queue_heap_sender_id_V_q0)
);

event_history_kernel_rollback_event_queue_heap_sender_id_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
event_queue_heap_receiver_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(event_queue_heap_receiver_id_V_address0),
    .ce0(event_queue_heap_receiver_id_V_ce0),
    .we0(event_queue_heap_receiver_id_V_we0),
    .d0(event_queue_heap_receiver_id_V_d0),
    .q0(event_queue_heap_receiver_id_V_q0)
);

event_history_kernel_rollback_event_queue_heap_is_anti_message_V_RAM_AUTO_1R1W #(
    .DataWidth( 1 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
event_queue_heap_is_anti_message_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(event_queue_heap_is_anti_message_V_address0),
    .ce0(event_queue_heap_is_anti_message_V_ce0),
    .we0(event_queue_heap_is_anti_message_V_we0),
    .d0(event_queue_heap_is_anti_message_V_d0),
    .q0(event_queue_heap_is_anti_message_V_q0)
);

event_history_kernel_rollback_Pipeline_VITIS_LOOP_35_1 grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start),
    .ap_done(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_done),
    .ap_idle(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_idle),
    .ap_ready(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_ready),
    .zext_ln1077(trunc_ln1077_reg_571),
    .temp_recv_time_V(temp_recv_time_V_reg_557),
    .index_V_1_out(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_1_out),
    .index_V_1_out_ap_vld(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_1_out_ap_vld),
    .index_V_3_out(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_3_out),
    .index_V_3_out_ap_vld(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_3_out_ap_vld),
    .event_queue_heap_recv_time_V_address0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_address0),
    .event_queue_heap_recv_time_V_ce0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_ce0),
    .event_queue_heap_recv_time_V_we0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_we0),
    .event_queue_heap_recv_time_V_d0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_d0),
    .event_queue_heap_recv_time_V_q0(event_queue_heap_recv_time_V_q0),
    .event_queue_heap_send_time_V_address0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_address0),
    .event_queue_heap_send_time_V_ce0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_ce0),
    .event_queue_heap_send_time_V_we0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_we0),
    .event_queue_heap_send_time_V_d0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_d0),
    .event_queue_heap_send_time_V_q0(event_queue_heap_send_time_V_q0),
    .event_queue_heap_data_V_address0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_address0),
    .event_queue_heap_data_V_ce0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_ce0),
    .event_queue_heap_data_V_we0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_we0),
    .event_queue_heap_data_V_d0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_d0),
    .event_queue_heap_data_V_q0(event_queue_heap_data_V_q0),
    .event_queue_heap_sender_id_V_address0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_address0),
    .event_queue_heap_sender_id_V_ce0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_ce0),
    .event_queue_heap_sender_id_V_we0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_we0),
    .event_queue_heap_sender_id_V_d0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_d0),
    .event_queue_heap_sender_id_V_q0(event_queue_heap_sender_id_V_q0),
    .event_queue_heap_receiver_id_V_address0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_address0),
    .event_queue_heap_receiver_id_V_ce0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_ce0),
    .event_queue_heap_receiver_id_V_we0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_we0),
    .event_queue_heap_receiver_id_V_d0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_d0),
    .event_queue_heap_receiver_id_V_q0(event_queue_heap_receiver_id_V_q0),
    .event_queue_heap_is_anti_message_V_address0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_address0),
    .event_queue_heap_is_anti_message_V_ce0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_ce0),
    .event_queue_heap_is_anti_message_V_we0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_we0),
    .event_queue_heap_is_anti_message_V_d0(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_d0),
    .event_queue_heap_is_anti_message_V_q0(event_queue_heap_is_anti_message_V_q0),
    .ap_return(grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_preg <= retval_0_reg_340;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start_reg <= 1'b1;
        end else if ((grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_ready == 1'b1)) begin
            grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        current_V_1_fu_68 <= history_lp_heads_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        current_V_1_fu_68 <= history_buffer_next_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((1'b1 == ap_condition_281)) begin
            retval_0_reg_340 <= 1'd0;
        end else if (((icmp_ln1081_fu_398_p2 == 1'd0) | (icmp_ln1069_reg_538 == 1'd1))) begin
            retval_0_reg_340 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_411_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        event_queue_size_V <= add_ln886_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        history_lp_heads_V_addr_reg_520 <= zext_ln587_fu_373_p1;
        history_lp_sizes_V_addr_reg_525 <= zext_ln587_fu_373_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln1069_reg_538 <= icmp_ln1069_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        index_V_1_loc_fu_76 <= grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_3_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        index_V_3_loc_fu_72 <= grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_index_V_3_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        index_V_reg_566 <= event_queue_size_V;
        trunc_ln1077_reg_571 <= trunc_ln1077_fu_407_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        targetBlock_reg_634 <= grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_data_V_reg_614 <= history_buffer_event_data_V_q0;
        temp_is_anti_message_V_reg_629 <= history_buffer_event_is_anti_message_V_q0;
        temp_receiver_id_V_reg_624 <= history_buffer_event_receiver_id_V_q0;
        temp_send_time_V_reg_609 <= history_buffer_event_send_time_V_q0;
        temp_sender_id_V_reg_619 <= history_buffer_event_sender_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1069_reg_538 == 1'd0))) begin
        temp_recv_time_V_reg_557 <= history_buffer_event_recv_time_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1069_fu_387_p2 == 1'd0))) begin
        zext_ln587_1_reg_542[15 : 0] <= zext_ln587_1_fu_393_p1[15 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return = retval_0_reg_340;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_data_V_address0 = zext_ln587_3_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_data_V_address0 = zext_ln587_2_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_data_V_address0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_address0;
    end else begin
        event_queue_heap_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_data_V_ce0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_ce0;
    end else begin
        event_queue_heap_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_data_V_d0 = temp_data_V_reg_614;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_data_V_d0 = history_buffer_event_data_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_data_V_d0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_d0;
    end else begin
        event_queue_heap_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_data_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_data_V_we0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_data_V_we0;
    end else begin
        event_queue_heap_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_is_anti_message_V_address0 = zext_ln587_3_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_is_anti_message_V_address0 = zext_ln587_2_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_is_anti_message_V_address0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_address0;
    end else begin
        event_queue_heap_is_anti_message_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_is_anti_message_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_is_anti_message_V_ce0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_ce0;
    end else begin
        event_queue_heap_is_anti_message_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_is_anti_message_V_d0 = temp_is_anti_message_V_reg_629;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_is_anti_message_V_d0 = history_buffer_event_is_anti_message_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_is_anti_message_V_d0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_d0;
    end else begin
        event_queue_heap_is_anti_message_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_is_anti_message_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_is_anti_message_V_we0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_is_anti_message_V_we0;
    end else begin
        event_queue_heap_is_anti_message_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_receiver_id_V_address0 = zext_ln587_3_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_receiver_id_V_address0 = zext_ln587_2_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_receiver_id_V_address0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_address0;
    end else begin
        event_queue_heap_receiver_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_receiver_id_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_receiver_id_V_ce0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_ce0;
    end else begin
        event_queue_heap_receiver_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_receiver_id_V_d0 = temp_receiver_id_V_reg_624;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_receiver_id_V_d0 = history_buffer_event_receiver_id_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_receiver_id_V_d0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_d0;
    end else begin
        event_queue_heap_receiver_id_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_receiver_id_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_receiver_id_V_we0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_receiver_id_V_we0;
    end else begin
        event_queue_heap_receiver_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_recv_time_V_address0 = zext_ln587_3_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_recv_time_V_address0 = zext_ln587_2_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_recv_time_V_address0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_address0;
    end else begin
        event_queue_heap_recv_time_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_recv_time_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_recv_time_V_ce0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_ce0;
    end else begin
        event_queue_heap_recv_time_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_recv_time_V_d0 = temp_recv_time_V_reg_557;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_recv_time_V_d0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_d0;
    end else begin
        event_queue_heap_recv_time_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_recv_time_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_recv_time_V_we0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_recv_time_V_we0;
    end else begin
        event_queue_heap_recv_time_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_send_time_V_address0 = zext_ln587_3_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_send_time_V_address0 = zext_ln587_2_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_send_time_V_address0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_address0;
    end else begin
        event_queue_heap_send_time_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_send_time_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_send_time_V_ce0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_ce0;
    end else begin
        event_queue_heap_send_time_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_send_time_V_d0 = temp_send_time_V_reg_609;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_send_time_V_d0 = history_buffer_event_send_time_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_send_time_V_d0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_d0;
    end else begin
        event_queue_heap_send_time_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_send_time_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_send_time_V_we0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_send_time_V_we0;
    end else begin
        event_queue_heap_send_time_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_sender_id_V_address0 = zext_ln587_3_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_sender_id_V_address0 = zext_ln587_2_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_sender_id_V_address0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_address0;
    end else begin
        event_queue_heap_sender_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_sender_id_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_sender_id_V_ce0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_ce0;
    end else begin
        event_queue_heap_sender_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        event_queue_heap_sender_id_V_d0 = temp_sender_id_V_reg_619;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        event_queue_heap_sender_id_V_d0 = history_buffer_event_sender_id_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_sender_id_V_d0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_d0;
    end else begin
        event_queue_heap_sender_id_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        event_queue_heap_sender_id_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        event_queue_heap_sender_id_V_we0 = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_event_queue_heap_sender_id_V_we0;
    end else begin
        event_queue_heap_sender_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        history_buffer_event_data_V_ce0 = 1'b1;
    end else begin
        history_buffer_event_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        history_buffer_event_is_anti_message_V_ce0 = 1'b1;
    end else begin
        history_buffer_event_is_anti_message_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        history_buffer_event_receiver_id_V_ce0 = 1'b1;
    end else begin
        history_buffer_event_receiver_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        history_buffer_event_recv_time_V_ce0 = 1'b1;
    end else begin
        history_buffer_event_recv_time_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        history_buffer_event_send_time_V_ce0 = 1'b1;
    end else begin
        history_buffer_event_send_time_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        history_buffer_event_sender_id_V_ce0 = 1'b1;
    end else begin
        history_buffer_event_sender_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_411_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        history_buffer_next_V_ce0 = 1'b1;
    end else begin
        history_buffer_next_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_411_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        history_buffer_next_V_we0 = 1'b1;
    end else begin
        history_buffer_next_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_411_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        history_free_head_V_o = current_V_1_fu_68;
    end else begin
        history_free_head_V_o = history_free_head_V_i;
    end
end

always @ (*) begin
    if (((tmp_fu_411_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        history_free_head_V_o_ap_vld = 1'b1;
    end else begin
        history_free_head_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        history_lp_heads_V_address0 = history_lp_heads_V_addr_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        history_lp_heads_V_address0 = zext_ln587_fu_373_p1;
    end else begin
        history_lp_heads_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        history_lp_heads_V_ce0 = 1'b1;
    end else begin
        history_lp_heads_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        history_lp_heads_V_we0 = 1'b1;
    end else begin
        history_lp_heads_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        history_lp_sizes_V_ce0 = 1'b1;
    end else begin
        history_lp_sizes_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        history_lp_sizes_V_we0 = 1'b1;
    end else begin
        history_lp_sizes_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_411_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        history_total_size_V_o = add_ln887_1_fu_445_p2;
    end else begin
        history_total_size_V_o = history_total_size_V_i;
    end
end

always @ (*) begin
    if (((tmp_fu_411_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0))) begin
        history_total_size_V_o_ap_vld = 1'b1;
    end else begin
        history_total_size_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln1069_reg_538 == 1'd1) | ((tmp_fu_411_p3 == 1'd1) | (icmp_ln1081_fu_398_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln886_fu_419_p2 = (event_queue_size_V + 8'd1);

assign add_ln887_1_fu_445_p2 = ($signed(history_total_size_V_i) + $signed(16'd65535));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_281 = ((tmp_fu_411_p3 == 1'd1) & (icmp_ln1081_fu_398_p2 == 1'd1) & (icmp_ln1069_reg_538 == 1'd0));
end

assign grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start = grp_rollback_Pipeline_VITIS_LOOP_35_1_fu_353_ap_start_reg;

assign history_buffer_event_data_V_address0 = zext_ln587_1_reg_542;

assign history_buffer_event_is_anti_message_V_address0 = zext_ln587_1_reg_542;

assign history_buffer_event_receiver_id_V_address0 = zext_ln587_1_reg_542;

assign history_buffer_event_recv_time_V_address0 = zext_ln587_1_fu_393_p1;

assign history_buffer_event_send_time_V_address0 = zext_ln587_1_reg_542;

assign history_buffer_event_sender_id_V_address0 = zext_ln587_1_reg_542;

assign history_buffer_next_V_address0 = zext_ln587_1_reg_542;

assign history_buffer_next_V_d0 = history_free_head_V_i;

assign history_lp_heads_V_d0 = history_buffer_next_V_q0;

assign history_lp_sizes_V_address0 = history_lp_sizes_V_addr_reg_525;

assign history_lp_sizes_V_d0 = ($signed(history_lp_sizes_V_q0) + $signed(16'd65535));

assign icmp_ln1069_fu_387_p2 = ((current_V_1_fu_68 == 16'd65535) ? 1'b1 : 1'b0);

assign icmp_ln1081_fu_398_p2 = (($signed(history_buffer_event_recv_time_V_q0) > $signed(to_time)) ? 1'b1 : 1'b0);

assign index_V_4_fu_484_p3 = ((targetBlock_reg_634[0:0] == 1'b1) ? index_V_1_loc_fu_76 : index_V_3_loc_fu_72);

assign tmp_fu_411_p3 = event_queue_size_V[32'd7];

assign trunc_ln1077_fu_407_p1 = event_queue_size_V[6:0];

assign zext_ln587_1_fu_393_p1 = current_V_1_fu_68;

assign zext_ln587_2_fu_457_p1 = index_V_reg_566;

assign zext_ln587_3_fu_491_p1 = index_V_4_fu_484_p3;

assign zext_ln587_fu_373_p1 = lp_id;

always @ (posedge ap_clk) begin
    zext_ln587_1_reg_542[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //event_history_kernel_rollback
