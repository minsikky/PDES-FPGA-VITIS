-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lpcore_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    init_event_stream_dout : IN STD_LOGIC_VECTOR (128 downto 0);
    init_event_stream_empty_n : IN STD_LOGIC;
    init_event_stream_read : OUT STD_LOGIC;
    event_queue_full_stream_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    event_queue_full_stream_full_n : IN STD_LOGIC;
    event_queue_full_stream_write : OUT STD_LOGIC;
    anti_message_stream_dout : IN STD_LOGIC_VECTOR (128 downto 0);
    anti_message_stream_empty_n : IN STD_LOGIC;
    anti_message_stream_read : OUT STD_LOGIC;
    enqueue_event_stream_dout : IN STD_LOGIC_VECTOR (128 downto 0);
    enqueue_event_stream_empty_n : IN STD_LOGIC;
    enqueue_event_stream_read : OUT STD_LOGIC;
    output_event_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    output_event_stream_full_n : IN STD_LOGIC;
    output_event_stream_write : OUT STD_LOGIC;
    cancellation_unit_output_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    cancellation_unit_output_stream_full_n : IN STD_LOGIC;
    cancellation_unit_output_stream_write : OUT STD_LOGIC;
    commit_time_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    commit_time_stream_empty_n : IN STD_LOGIC;
    commit_time_stream_read : OUT STD_LOGIC );
end;


architecture behav of lpcore_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lpcore_top_lpcore_top,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=17,HLS_SYN_DSP=0,HLS_SYN_FF=3844,HLS_SYN_LUT=6514,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_lpcore_kernel_0_s_fu_104_init_event_stream_read : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_write : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_anti_message_stream_read : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_enqueue_event_stream_read : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_output_event_stream_din : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_lpcore_kernel_0_s_fu_104_output_event_stream_write : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_din : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_write : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_commit_time_stream_read : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_ap_start : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_ap_done : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_ap_ready : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_ap_idle : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_ap_continue : STD_LOGIC;
    signal grp_lpcore_kernel_0_s_fu_104_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready : STD_LOGIC;
    signal ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lpcore_top_lpcore_kernel_0_s IS
    port (
        init_event_stream_dout : IN STD_LOGIC_VECTOR (128 downto 0);
        init_event_stream_empty_n : IN STD_LOGIC;
        init_event_stream_read : OUT STD_LOGIC;
        event_queue_full_stream_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        event_queue_full_stream_full_n : IN STD_LOGIC;
        event_queue_full_stream_write : OUT STD_LOGIC;
        anti_message_stream_dout : IN STD_LOGIC_VECTOR (128 downto 0);
        anti_message_stream_empty_n : IN STD_LOGIC;
        anti_message_stream_read : OUT STD_LOGIC;
        enqueue_event_stream_dout : IN STD_LOGIC_VECTOR (128 downto 0);
        enqueue_event_stream_empty_n : IN STD_LOGIC;
        enqueue_event_stream_read : OUT STD_LOGIC;
        output_event_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
        output_event_stream_full_n : IN STD_LOGIC;
        output_event_stream_write : OUT STD_LOGIC;
        cancellation_unit_output_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
        cancellation_unit_output_stream_full_n : IN STD_LOGIC;
        cancellation_unit_output_stream_write : OUT STD_LOGIC;
        commit_time_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        commit_time_stream_empty_n : IN STD_LOGIC;
        commit_time_stream_read : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_lpcore_kernel_0_s_fu_104 : component lpcore_top_lpcore_kernel_0_s
    port map (
        init_event_stream_dout => init_event_stream_dout,
        init_event_stream_empty_n => init_event_stream_empty_n,
        init_event_stream_read => grp_lpcore_kernel_0_s_fu_104_init_event_stream_read,
        event_queue_full_stream_din => grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_din,
        event_queue_full_stream_full_n => event_queue_full_stream_full_n,
        event_queue_full_stream_write => grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_write,
        anti_message_stream_dout => anti_message_stream_dout,
        anti_message_stream_empty_n => anti_message_stream_empty_n,
        anti_message_stream_read => grp_lpcore_kernel_0_s_fu_104_anti_message_stream_read,
        enqueue_event_stream_dout => enqueue_event_stream_dout,
        enqueue_event_stream_empty_n => enqueue_event_stream_empty_n,
        enqueue_event_stream_read => grp_lpcore_kernel_0_s_fu_104_enqueue_event_stream_read,
        output_event_stream_din => grp_lpcore_kernel_0_s_fu_104_output_event_stream_din,
        output_event_stream_full_n => output_event_stream_full_n,
        output_event_stream_write => grp_lpcore_kernel_0_s_fu_104_output_event_stream_write,
        cancellation_unit_output_stream_din => grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_din,
        cancellation_unit_output_stream_full_n => cancellation_unit_output_stream_full_n,
        cancellation_unit_output_stream_write => grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_write,
        commit_time_stream_dout => commit_time_stream_dout,
        commit_time_stream_empty_n => commit_time_stream_empty_n,
        commit_time_stream_read => grp_lpcore_kernel_0_s_fu_104_commit_time_stream_read,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lpcore_kernel_0_s_fu_104_ap_start,
        ap_done => grp_lpcore_kernel_0_s_fu_104_ap_done,
        ap_ready => grp_lpcore_kernel_0_s_fu_104_ap_ready,
        ap_idle => grp_lpcore_kernel_0_s_fu_104_ap_idle,
        ap_continue => grp_lpcore_kernel_0_s_fu_104_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done <= ap_const_logic_0;
                elsif ((grp_lpcore_kernel_0_s_fu_104_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready <= ap_const_logic_0;
                elsif ((grp_lpcore_kernel_0_s_fu_104_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_lpcore_kernel_0_s_fu_104_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lpcore_kernel_0_s_fu_104_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_lpcore_kernel_0_s_fu_104_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lpcore_kernel_0_s_fu_104_ap_ready = ap_const_logic_1)) then 
                    grp_lpcore_kernel_0_s_fu_104_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    anti_message_stream_read_assign_proc : process(grp_lpcore_kernel_0_s_fu_104_anti_message_stream_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            anti_message_stream_read <= grp_lpcore_kernel_0_s_fu_104_anti_message_stream_read;
        else 
            anti_message_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready, ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready and ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_done <= (grp_lpcore_kernel_0_s_fu_104_ap_done or ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done);
    ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready <= (grp_lpcore_kernel_0_s_fu_104_ap_ready or ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready);
    cancellation_unit_output_stream_din <= grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_din;

    cancellation_unit_output_stream_write_assign_proc : process(grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cancellation_unit_output_stream_write <= grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_write;
        else 
            cancellation_unit_output_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    commit_time_stream_read_assign_proc : process(grp_lpcore_kernel_0_s_fu_104_commit_time_stream_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            commit_time_stream_read <= grp_lpcore_kernel_0_s_fu_104_commit_time_stream_read;
        else 
            commit_time_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    enqueue_event_stream_read_assign_proc : process(grp_lpcore_kernel_0_s_fu_104_enqueue_event_stream_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            enqueue_event_stream_read <= grp_lpcore_kernel_0_s_fu_104_enqueue_event_stream_read;
        else 
            enqueue_event_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_full_stream_din <= grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_din;

    event_queue_full_stream_write_assign_proc : process(grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            event_queue_full_stream_write <= grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_write;
        else 
            event_queue_full_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_lpcore_kernel_0_s_fu_104_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_lpcore_kernel_0_s_fu_104_ap_continue <= ap_const_logic_1;
        else 
            grp_lpcore_kernel_0_s_fu_104_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_lpcore_kernel_0_s_fu_104_ap_start <= grp_lpcore_kernel_0_s_fu_104_ap_start_reg;

    init_event_stream_read_assign_proc : process(grp_lpcore_kernel_0_s_fu_104_init_event_stream_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_event_stream_read <= grp_lpcore_kernel_0_s_fu_104_init_event_stream_read;
        else 
            init_event_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    output_event_stream_din <= grp_lpcore_kernel_0_s_fu_104_output_event_stream_din;

    output_event_stream_write_assign_proc : process(grp_lpcore_kernel_0_s_fu_104_output_event_stream_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_event_stream_write <= grp_lpcore_kernel_0_s_fu_104_output_event_stream_write;
        else 
            output_event_stream_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
