-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lpcore_top_cancellation_unit_top_0_Pipeline_VITIS_LOOP_58_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    current_V : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln145 : IN STD_LOGIC_VECTOR (1 downto 0);
    cancellation_unit_output_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    cancellation_unit_output_stream_full_n : IN STD_LOGIC;
    cancellation_unit_output_stream_write : OUT STD_LOGIC;
    tmp_to_time_V : IN STD_LOGIC_VECTOR (31 downto 0);
    cancellation_unit_buffer_event_recv_time_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cancellation_unit_buffer_event_recv_time_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_buffer_event_recv_time_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cancellation_unit_buffer_event_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cancellation_unit_buffer_event_data_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_buffer_event_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cancellation_unit_buffer_event_sender_id_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cancellation_unit_buffer_event_sender_id_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_buffer_event_sender_id_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_buffer_event_receiver_id_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cancellation_unit_buffer_event_receiver_id_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_buffer_event_receiver_id_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_buffer_next_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cancellation_unit_buffer_next_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_buffer_next_V_we0 : OUT STD_LOGIC;
    cancellation_unit_buffer_next_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_buffer_next_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_lp_heads_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    cancellation_unit_lp_heads_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_lp_heads_V_we0 : OUT STD_LOGIC;
    cancellation_unit_lp_heads_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_free_head_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_free_head_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_free_head_V_o_ap_vld : OUT STD_LOGIC;
    cancellation_unit_lp_sizes_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    cancellation_unit_lp_sizes_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_lp_sizes_V_we0 : OUT STD_LOGIC;
    cancellation_unit_lp_sizes_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_lp_sizes_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_total_size_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_total_size_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cancellation_unit_total_size_V_o_ap_vld : OUT STD_LOGIC;
    cancellation_unit_buffer_event_send_time_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cancellation_unit_buffer_event_send_time_V_ce0 : OUT STD_LOGIC;
    cancellation_unit_buffer_event_send_time_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lpcore_top_cancellation_unit_top_0_Pipeline_VITIS_LOOP_58_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1081_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cancellation_unit_output_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln145_cast_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_cast_reg_412 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_V_14_reg_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1069_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln587_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal cancellation_unit_lp_sizes_V_addr_reg_445 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal cancellation_unit_lp_heads_V_addr_reg_450 : STD_LOGIC_VECTOR (1 downto 0);
    signal anti_message_send_time_V_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_reg1_load_reg_488 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_cmp5_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp5_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal add_ln887_3_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_addr_reg2_fu_68 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg1_fu_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_addr_reg_fu_76 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln887_fu_355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_V_8_fu_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_V_15_fu_338_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_current_V_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal reuse_select_fu_348_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lpcore_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component lpcore_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    current_V_8_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    current_V_8_fu_84 <= current_V;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    current_V_8_fu_84 <= current_V_15_fu_338_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg2_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_addr_reg2_fu_68 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_addr_reg2_fu_68 <= zext_ln587_reg_429;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_addr_reg_fu_76 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_addr_reg_fu_76 <= zext_ln145_cast_reg_412;
            end if; 
        end if;
    end process;

    reuse_reg1_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_reg1_fu_72 <= ap_const_lv16_0;
            elsif (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_reg1_fu_72 <= cancellation_unit_free_head_V_i;
            end if; 
        end if;
    end process;

    reuse_reg_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_80 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reuse_reg_fu_80 <= add_ln887_fu_355_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                addr_cmp5_reg_493 <= addr_cmp5_fu_270_p2;
                addr_cmp_reg_498 <= addr_cmp_fu_297_p2;
                reuse_reg1_load_reg_488 <= reuse_reg1_fu_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                anti_message_send_time_V_reg_455 <= cancellation_unit_buffer_event_send_time_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                cancellation_unit_lp_heads_V_addr_reg_450 <= zext_ln145_cast_reg_412(2 - 1 downto 0);
                cancellation_unit_lp_sizes_V_addr_reg_445 <= zext_ln145_cast_reg_412(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                current_V_14_reg_420 <= ap_sig_allocacmp_current_V_14;
                icmp_ln1069_reg_425 <= icmp_ln1069_fu_248_p2;
                    zext_ln145_cast_reg_412(1 downto 0) <= zext_ln145_cast_fu_216_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1069_fu_248_p2 = ap_const_lv1_0))) then
                    zext_ln587_reg_429(15 downto 0) <= zext_ln587_fu_254_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln145_cast_reg_412(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln587_reg_429(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln887_3_fu_310_p2 <= std_logic_vector(unsigned(cancellation_unit_total_size_V_i) + unsigned(ap_const_lv16_FFFF));
    add_ln887_fu_355_p2 <= std_logic_vector(unsigned(reuse_select_fu_348_p3) + unsigned(ap_const_lv16_FFFF));
    addr_cmp5_fu_270_p2 <= "1" when (reuse_addr_reg2_fu_68 = zext_ln587_reg_429) else "0";
    addr_cmp_fu_297_p2 <= "1" when (reuse_addr_reg_fu_76 = zext_ln145_cast_reg_412) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, cancellation_unit_output_stream_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((cancellation_unit_output_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, cancellation_unit_output_stream_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((cancellation_unit_output_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, cancellation_unit_output_stream_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((cancellation_unit_output_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(cancellation_unit_output_stream_full_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (cancellation_unit_output_stream_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1081_fu_259_p2, icmp_ln1069_reg_425)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln1069_reg_425 = ap_const_lv1_1) or (icmp_ln1081_fu_259_p2 = ap_const_lv1_0)))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_current_V_14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, current_V, ap_block_pp0_stage0, ap_loop_init, current_V_8_fu_84, current_V_15_fu_338_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_current_V_14 <= current_V;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_current_V_14 <= current_V_15_fu_338_p3;
            else 
                ap_sig_allocacmp_current_V_14 <= current_V_8_fu_84;
            end if;
        else 
            ap_sig_allocacmp_current_V_14 <= current_V_8_fu_84;
        end if; 
    end process;

    cancellation_unit_buffer_event_data_V_address0 <= zext_ln587_reg_429(6 - 1 downto 0);

    cancellation_unit_buffer_event_data_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_buffer_event_data_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_buffer_event_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_buffer_event_receiver_id_V_address0 <= zext_ln587_reg_429(6 - 1 downto 0);

    cancellation_unit_buffer_event_receiver_id_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_buffer_event_receiver_id_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_buffer_event_receiver_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_buffer_event_recv_time_V_address0 <= zext_ln587_reg_429(6 - 1 downto 0);

    cancellation_unit_buffer_event_recv_time_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_buffer_event_recv_time_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_buffer_event_recv_time_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_buffer_event_send_time_V_address0 <= zext_ln587_fu_254_p1(6 - 1 downto 0);

    cancellation_unit_buffer_event_send_time_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cancellation_unit_buffer_event_send_time_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_buffer_event_send_time_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_buffer_event_sender_id_V_address0 <= zext_ln587_reg_429(6 - 1 downto 0);

    cancellation_unit_buffer_event_sender_id_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_buffer_event_sender_id_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_buffer_event_sender_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_buffer_next_V_address0 <= zext_ln587_reg_429(6 - 1 downto 0);

    cancellation_unit_buffer_next_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1081_fu_259_p2, icmp_ln1069_reg_425, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_buffer_next_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_buffer_next_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_buffer_next_V_d0 <= cancellation_unit_free_head_V_i;

    cancellation_unit_buffer_next_V_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1081_fu_259_p2, icmp_ln1069_reg_425, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_buffer_next_V_we0 <= ap_const_logic_1;
        else 
            cancellation_unit_buffer_next_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cancellation_unit_free_head_V_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1081_fu_259_p2, icmp_ln1069_reg_425, cancellation_unit_free_head_V_i, current_V_14_reg_420, ap_block_pp0_stage1)
    begin
        if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_free_head_V_o <= current_V_14_reg_420;
        else 
            cancellation_unit_free_head_V_o <= cancellation_unit_free_head_V_i;
        end if; 
    end process;


    cancellation_unit_free_head_V_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1081_fu_259_p2, icmp_ln1069_reg_425, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_free_head_V_o_ap_vld <= ap_const_logic_1;
        else 
            cancellation_unit_free_head_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_lp_heads_V_address0 <= cancellation_unit_lp_heads_V_addr_reg_450;

    cancellation_unit_lp_heads_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cancellation_unit_lp_heads_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_lp_heads_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_lp_heads_V_d0 <= 
        reuse_reg1_load_reg_488 when (addr_cmp5_reg_493(0) = '1') else 
        cancellation_unit_buffer_next_V_q0;

    cancellation_unit_lp_heads_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cancellation_unit_lp_heads_V_we0 <= ap_const_logic_1;
        else 
            cancellation_unit_lp_heads_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cancellation_unit_lp_sizes_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln145_cast_reg_412, cancellation_unit_lp_sizes_V_addr_reg_445, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cancellation_unit_lp_sizes_V_address0 <= cancellation_unit_lp_sizes_V_addr_reg_445;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_lp_sizes_V_address0 <= zext_ln145_cast_reg_412(2 - 1 downto 0);
        else 
            cancellation_unit_lp_sizes_V_address0 <= "XX";
        end if; 
    end process;


    cancellation_unit_lp_sizes_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            cancellation_unit_lp_sizes_V_ce0 <= ap_const_logic_1;
        else 
            cancellation_unit_lp_sizes_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_lp_sizes_V_d0 <= std_logic_vector(unsigned(reuse_select_fu_348_p3) + unsigned(ap_const_lv16_FFFF));

    cancellation_unit_lp_sizes_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cancellation_unit_lp_sizes_V_we0 <= ap_const_logic_1;
        else 
            cancellation_unit_lp_sizes_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cancellation_unit_output_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, cancellation_unit_output_stream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cancellation_unit_output_stream_blk_n <= cancellation_unit_output_stream_full_n;
        else 
            cancellation_unit_output_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cancellation_unit_output_stream_din <= (((((ap_const_lv1_1 & cancellation_unit_buffer_event_receiver_id_V_q0) & cancellation_unit_buffer_event_sender_id_V_q0) & cancellation_unit_buffer_event_data_V_q0) & cancellation_unit_buffer_event_recv_time_V_q0) & anti_message_send_time_V_reg_455);

    cancellation_unit_output_stream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cancellation_unit_output_stream_write <= ap_const_logic_1;
        else 
            cancellation_unit_output_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    cancellation_unit_total_size_V_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1081_fu_259_p2, icmp_ln1069_reg_425, cancellation_unit_total_size_V_i, ap_block_pp0_stage1, add_ln887_3_fu_310_p2)
    begin
        if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_total_size_V_o <= add_ln887_3_fu_310_p2;
        else 
            cancellation_unit_total_size_V_o <= cancellation_unit_total_size_V_i;
        end if; 
    end process;


    cancellation_unit_total_size_V_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1081_fu_259_p2, icmp_ln1069_reg_425, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1069_reg_425 = ap_const_lv1_0) and (icmp_ln1081_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cancellation_unit_total_size_V_o_ap_vld <= ap_const_logic_1;
        else 
            cancellation_unit_total_size_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    current_V_15_fu_338_p3 <= 
        reuse_reg1_load_reg_488 when (addr_cmp5_reg_493(0) = '1') else 
        cancellation_unit_buffer_next_V_q0;
    icmp_ln1069_fu_248_p2 <= "1" when (ap_sig_allocacmp_current_V_14 = ap_const_lv16_FFFF) else "0";
    icmp_ln1081_fu_259_p2 <= "1" when (signed(cancellation_unit_buffer_event_send_time_V_q0) > signed(tmp_to_time_V)) else "0";
    reuse_select_fu_348_p3 <= 
        reuse_reg_fu_80 when (addr_cmp_reg_498(0) = '1') else 
        cancellation_unit_lp_sizes_V_q0;
    zext_ln145_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln145),64));
    zext_ln587_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_current_V_14),64));
end behav;
