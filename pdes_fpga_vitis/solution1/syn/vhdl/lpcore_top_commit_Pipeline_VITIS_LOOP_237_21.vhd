-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lpcore_top_commit_Pipeline_VITIS_LOOP_237_21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    event_queue_lp_tails_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    event_queue_lp_tails_V_ce0 : OUT STD_LOGIC;
    event_queue_lp_tails_V_we0 : OUT STD_LOGIC;
    event_queue_lp_tails_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_lp_youngest_issued_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    event_queue_lp_youngest_issued_V_ce0 : OUT STD_LOGIC;
    event_queue_lp_youngest_issued_V_we0 : OUT STD_LOGIC;
    event_queue_lp_youngest_issued_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_lp_youngest_issued_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_lp_heads_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    event_queue_lp_heads_V_ce0 : OUT STD_LOGIC;
    event_queue_lp_heads_V_we0 : OUT STD_LOGIC;
    event_queue_lp_heads_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_lp_heads_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    event_queue_lp_heads_V_ce1 : OUT STD_LOGIC;
    event_queue_lp_heads_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_buffer_next_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    event_queue_buffer_next_V_ce0 : OUT STD_LOGIC;
    event_queue_buffer_next_V_we0 : OUT STD_LOGIC;
    event_queue_buffer_next_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_buffer_next_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_buffer_event_recv_time_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    event_queue_buffer_event_recv_time_V_ce0 : OUT STD_LOGIC;
    event_queue_buffer_event_recv_time_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    commit_time : IN STD_LOGIC_VECTOR (31 downto 0);
    event_queue_size_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_size_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_size_V_o_ap_vld : OUT STD_LOGIC;
    event_queue_free_head_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_free_head_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_free_head_V_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of lpcore_top_commit_Pipeline_VITIS_LOOP_237_21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln1085_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal commit_entry_V_fu_169_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal commit_entry_V_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1069_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln587_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_reg_316 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal event_queue_lp_youngest_issued_V_addr_reg_333 : STD_LOGIC_VECTOR (1 downto 0);
    signal reuse_reg_load_reg_346 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_cmp_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal add_ln887_fu_232_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_addr_reg2_fu_42 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg1_fu_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_select_fu_244_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_addr_reg_fu_50 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_54 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1065_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_16_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp5_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lpcore_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component lpcore_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    reuse_addr_reg2_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_addr_reg2_fu_42(1) <= '1';
                reuse_addr_reg2_fu_42(2) <= '1';
                reuse_addr_reg2_fu_42(3) <= '1';
                reuse_addr_reg2_fu_42(4) <= '1';
                reuse_addr_reg2_fu_42(5) <= '1';
                reuse_addr_reg2_fu_42(6) <= '1';
                reuse_addr_reg2_fu_42(7) <= '1';
                reuse_addr_reg2_fu_42(8) <= '1';
                reuse_addr_reg2_fu_42(9) <= '1';
                reuse_addr_reg2_fu_42(10) <= '1';
                reuse_addr_reg2_fu_42(11) <= '1';
                reuse_addr_reg2_fu_42(12) <= '1';
                reuse_addr_reg2_fu_42(13) <= '1';
                reuse_addr_reg2_fu_42(14) <= '1';
                reuse_addr_reg2_fu_42(15) <= '1';
                reuse_addr_reg2_fu_42(16) <= '1';
                reuse_addr_reg2_fu_42(17) <= '1';
                reuse_addr_reg2_fu_42(18) <= '1';
                reuse_addr_reg2_fu_42(19) <= '1';
                reuse_addr_reg2_fu_42(20) <= '1';
                reuse_addr_reg2_fu_42(21) <= '1';
                reuse_addr_reg2_fu_42(22) <= '1';
                reuse_addr_reg2_fu_42(23) <= '1';
                reuse_addr_reg2_fu_42(24) <= '1';
                reuse_addr_reg2_fu_42(25) <= '1';
                reuse_addr_reg2_fu_42(26) <= '1';
                reuse_addr_reg2_fu_42(27) <= '1';
                reuse_addr_reg2_fu_42(28) <= '1';
                reuse_addr_reg2_fu_42(29) <= '1';
                reuse_addr_reg2_fu_42(30) <= '1';
                reuse_addr_reg2_fu_42(31) <= '1';
                reuse_addr_reg2_fu_42(32) <= '1';
                reuse_addr_reg2_fu_42(33) <= '1';
                reuse_addr_reg2_fu_42(34) <= '1';
                reuse_addr_reg2_fu_42(35) <= '1';
                reuse_addr_reg2_fu_42(36) <= '1';
                reuse_addr_reg2_fu_42(37) <= '1';
                reuse_addr_reg2_fu_42(38) <= '1';
                reuse_addr_reg2_fu_42(39) <= '1';
                reuse_addr_reg2_fu_42(40) <= '1';
                reuse_addr_reg2_fu_42(41) <= '1';
                reuse_addr_reg2_fu_42(42) <= '1';
                reuse_addr_reg2_fu_42(43) <= '1';
                reuse_addr_reg2_fu_42(44) <= '1';
                reuse_addr_reg2_fu_42(45) <= '1';
                reuse_addr_reg2_fu_42(46) <= '1';
                reuse_addr_reg2_fu_42(47) <= '1';
                reuse_addr_reg2_fu_42(48) <= '1';
                reuse_addr_reg2_fu_42(49) <= '1';
                reuse_addr_reg2_fu_42(50) <= '1';
                reuse_addr_reg2_fu_42(51) <= '1';
                reuse_addr_reg2_fu_42(52) <= '1';
                reuse_addr_reg2_fu_42(53) <= '1';
                reuse_addr_reg2_fu_42(54) <= '1';
                reuse_addr_reg2_fu_42(55) <= '1';
                reuse_addr_reg2_fu_42(56) <= '1';
                reuse_addr_reg2_fu_42(57) <= '1';
                reuse_addr_reg2_fu_42(58) <= '1';
                reuse_addr_reg2_fu_42(59) <= '1';
                reuse_addr_reg2_fu_42(60) <= '1';
                reuse_addr_reg2_fu_42(61) <= '1';
                reuse_addr_reg2_fu_42(62) <= '1';
                reuse_addr_reg2_fu_42(63) <= '1';
            elsif (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reuse_addr_reg2_fu_42(1) <= '0';
                reuse_addr_reg2_fu_42(2) <= '0';
                reuse_addr_reg2_fu_42(3) <= '0';
                reuse_addr_reg2_fu_42(4) <= '0';
                reuse_addr_reg2_fu_42(5) <= '0';
                reuse_addr_reg2_fu_42(6) <= '0';
                reuse_addr_reg2_fu_42(7) <= '0';
                reuse_addr_reg2_fu_42(8) <= '0';
                reuse_addr_reg2_fu_42(9) <= '0';
                reuse_addr_reg2_fu_42(10) <= '0';
                reuse_addr_reg2_fu_42(11) <= '0';
                reuse_addr_reg2_fu_42(12) <= '0';
                reuse_addr_reg2_fu_42(13) <= '0';
                reuse_addr_reg2_fu_42(14) <= '0';
                reuse_addr_reg2_fu_42(15) <= '0';
                reuse_addr_reg2_fu_42(16) <= '0';
                reuse_addr_reg2_fu_42(17) <= '0';
                reuse_addr_reg2_fu_42(18) <= '0';
                reuse_addr_reg2_fu_42(19) <= '0';
                reuse_addr_reg2_fu_42(20) <= '0';
                reuse_addr_reg2_fu_42(21) <= '0';
                reuse_addr_reg2_fu_42(22) <= '0';
                reuse_addr_reg2_fu_42(23) <= '0';
                reuse_addr_reg2_fu_42(24) <= '0';
                reuse_addr_reg2_fu_42(25) <= '0';
                reuse_addr_reg2_fu_42(26) <= '0';
                reuse_addr_reg2_fu_42(27) <= '0';
                reuse_addr_reg2_fu_42(28) <= '0';
                reuse_addr_reg2_fu_42(29) <= '0';
                reuse_addr_reg2_fu_42(30) <= '0';
                reuse_addr_reg2_fu_42(31) <= '0';
                reuse_addr_reg2_fu_42(32) <= '0';
                reuse_addr_reg2_fu_42(33) <= '0';
                reuse_addr_reg2_fu_42(34) <= '0';
                reuse_addr_reg2_fu_42(35) <= '0';
                reuse_addr_reg2_fu_42(36) <= '0';
                reuse_addr_reg2_fu_42(37) <= '0';
                reuse_addr_reg2_fu_42(38) <= '0';
                reuse_addr_reg2_fu_42(39) <= '0';
                reuse_addr_reg2_fu_42(40) <= '0';
                reuse_addr_reg2_fu_42(41) <= '0';
                reuse_addr_reg2_fu_42(42) <= '0';
                reuse_addr_reg2_fu_42(43) <= '0';
                reuse_addr_reg2_fu_42(44) <= '0';
                reuse_addr_reg2_fu_42(45) <= '0';
                reuse_addr_reg2_fu_42(46) <= '0';
                reuse_addr_reg2_fu_42(47) <= '0';
                reuse_addr_reg2_fu_42(48) <= '0';
                reuse_addr_reg2_fu_42(49) <= '0';
                reuse_addr_reg2_fu_42(50) <= '0';
                reuse_addr_reg2_fu_42(51) <= '0';
                reuse_addr_reg2_fu_42(52) <= '0';
                reuse_addr_reg2_fu_42(53) <= '0';
                reuse_addr_reg2_fu_42(54) <= '0';
                reuse_addr_reg2_fu_42(55) <= '0';
                reuse_addr_reg2_fu_42(56) <= '0';
                reuse_addr_reg2_fu_42(57) <= '0';
                reuse_addr_reg2_fu_42(58) <= '0';
                reuse_addr_reg2_fu_42(59) <= '0';
                reuse_addr_reg2_fu_42(60) <= '0';
                reuse_addr_reg2_fu_42(61) <= '0';
                reuse_addr_reg2_fu_42(62) <= '0';
                reuse_addr_reg2_fu_42(63) <= '0';
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_addr_reg_fu_50 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reuse_addr_reg_fu_50 <= zext_ln587_reg_316;
            end if; 
        end if;
    end process;

    reuse_reg1_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg1_fu_46 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reuse_reg1_fu_46 <= reuse_select_fu_244_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_reg_fu_54 <= ap_const_lv16_0;
            elsif (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reuse_reg_fu_54 <= event_queue_free_head_V_i;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                addr_cmp_reg_351 <= addr_cmp_fu_199_p2;
                reuse_reg_load_reg_346 <= reuse_reg_fu_54;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                commit_entry_V_reg_306 <= commit_entry_V_fu_169_p3;
                icmp_ln1069_reg_312 <= icmp_ln1069_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1069_fu_177_p2 = ap_const_lv1_0))) then
                    zext_ln587_reg_316(15 downto 0) <= zext_ln587_fu_183_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln587_reg_316(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    reuse_addr_reg2_fu_42(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln887_fu_232_p2 <= std_logic_vector(unsigned(event_queue_size_V_i) + unsigned(ap_const_lv16_FFFF));
    addr_cmp5_fu_163_p2 <= "1" when (reuse_addr_reg2_fu_42 = ap_const_lv64_1) else "0";
    addr_cmp_fu_199_p2 <= "1" when (reuse_addr_reg_fu_50 = zext_ln587_reg_316) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln1085_fu_188_p2, icmp_ln1069_reg_312)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and ((icmp_ln1069_reg_312 = ap_const_lv1_1) or (icmp_ln1085_fu_188_p2 = ap_const_lv1_1)))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    commit_entry_V_fu_169_p3 <= 
        reuse_reg1_fu_46 when (addr_cmp5_fu_163_p2(0) = '1') else 
        event_queue_lp_heads_V_q1;
    event_queue_buffer_event_recv_time_V_address0 <= zext_ln587_fu_183_p1(7 - 1 downto 0);

    event_queue_buffer_event_recv_time_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            event_queue_buffer_event_recv_time_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_buffer_event_recv_time_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_buffer_next_V_address0 <= zext_ln587_reg_316(7 - 1 downto 0);

    event_queue_buffer_next_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1085_fu_188_p2, icmp_ln1069_reg_312, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_buffer_next_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_buffer_next_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_buffer_next_V_d0 <= event_queue_free_head_V_i;

    event_queue_buffer_next_V_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1085_fu_188_p2, icmp_ln1069_reg_312, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_buffer_next_V_we0 <= ap_const_logic_1;
        else 
            event_queue_buffer_next_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    event_queue_free_head_V_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1085_fu_188_p2, icmp_ln1069_reg_312, event_queue_free_head_V_i, commit_entry_V_reg_306, ap_block_pp0_stage2)
    begin
        if (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_free_head_V_o <= commit_entry_V_reg_306;
        else 
            event_queue_free_head_V_o <= event_queue_free_head_V_i;
        end if; 
    end process;


    event_queue_free_head_V_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1085_fu_188_p2, icmp_ln1069_reg_312, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_free_head_V_o_ap_vld <= ap_const_logic_1;
        else 
            event_queue_free_head_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_heads_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
    event_queue_lp_heads_V_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    event_queue_lp_heads_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_heads_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_lp_heads_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    event_queue_lp_heads_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_heads_V_ce1 <= ap_const_logic_1;
        else 
            event_queue_lp_heads_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_heads_V_d0 <= reuse_select_fu_244_p3;

    event_queue_lp_heads_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_heads_V_we0 <= ap_const_logic_1;
        else 
            event_queue_lp_heads_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_tails_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);

    event_queue_lp_tails_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_tails_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_lp_tails_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_tails_V_d0 <= ap_const_lv16_FFFF;

    event_queue_lp_tails_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln1065_16_fu_261_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_16_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_tails_V_we0 <= ap_const_logic_1;
        else 
            event_queue_lp_tails_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_youngest_issued_V_addr_reg_333 <= ap_const_lv64_1(2 - 1 downto 0);

    event_queue_lp_youngest_issued_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, event_queue_lp_youngest_issued_V_addr_reg_333, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_youngest_issued_V_address0 <= event_queue_lp_youngest_issued_V_addr_reg_333;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_lp_youngest_issued_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            event_queue_lp_youngest_issued_V_address0 <= "XX";
        end if; 
    end process;


    event_queue_lp_youngest_issued_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            event_queue_lp_youngest_issued_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_lp_youngest_issued_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_youngest_issued_V_d0 <= ap_const_lv16_FFFF;

    event_queue_lp_youngest_issued_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln1065_fu_256_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_youngest_issued_V_we0 <= ap_const_logic_1;
        else 
            event_queue_lp_youngest_issued_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    event_queue_size_V_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1085_fu_188_p2, icmp_ln1069_reg_312, event_queue_size_V_i, ap_block_pp0_stage2, add_ln887_fu_232_p2)
    begin
        if (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_size_V_o <= add_ln887_fu_232_p2;
        else 
            event_queue_size_V_o <= event_queue_size_V_i;
        end if; 
    end process;


    event_queue_size_V_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1085_fu_188_p2, icmp_ln1069_reg_312, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln1069_reg_312 = ap_const_lv1_0) and (icmp_ln1085_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_size_V_o_ap_vld <= ap_const_logic_1;
        else 
            event_queue_size_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1065_16_fu_261_p2 <= "1" when (reuse_select_fu_244_p3 = ap_const_lv16_FFFF) else "0";
    icmp_ln1065_fu_256_p2 <= "1" when (commit_entry_V_reg_306 = event_queue_lp_youngest_issued_V_q0) else "0";
    icmp_ln1069_fu_177_p2 <= "1" when (commit_entry_V_fu_169_p3 = ap_const_lv16_FFFF) else "0";
    icmp_ln1085_fu_188_p2 <= "1" when (signed(event_queue_buffer_event_recv_time_V_q0) > signed(commit_time)) else "0";
    reuse_select_fu_244_p3 <= 
        reuse_reg_load_reg_346 when (addr_cmp_reg_351(0) = '1') else 
        event_queue_buffer_next_V_q0;
    zext_ln587_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(commit_entry_V_fu_169_p3),64));
end behav;
