-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lpcore_top_process_event is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_buffer_input_stream_din : OUT STD_LOGIC_VECTOR (79 downto 0);
    state_buffer_input_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    state_buffer_input_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    state_buffer_input_stream_full_n : IN STD_LOGIC;
    state_buffer_input_stream_write : OUT STD_LOGIC;
    output_event_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    output_event_stream_full_n : IN STD_LOGIC;
    output_event_stream_write : OUT STD_LOGIC;
    cancellation_unit_input_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    cancellation_unit_input_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    cancellation_unit_input_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    cancellation_unit_input_stream_full_n : IN STD_LOGIC;
    cancellation_unit_input_stream_write : OUT STD_LOGIC );
end;


architecture behav of lpcore_top_process_event is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal event_processor_prng_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal event_processor_prng_ce0 : STD_LOGIC;
    signal event_processor_prng_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal g_multi_prng_generators_state_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal g_multi_prng_generators_state_V_ce0 : STD_LOGIC;
    signal g_multi_prng_generators_state_V_we0 : STD_LOGIC;
    signal g_multi_prng_generators_state_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_multi_prng_generators_state_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_buffer_input_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_read_3_read_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_event_stream_blk_n : STD_LOGIC;
    signal cancellation_unit_input_stream_blk_n : STD_LOGIC;
    signal this_state_V_reg_340 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rhs_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln1544_fu_207_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1544_reg_351 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_1_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln37_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal zext_ln174_1_fu_307_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_fu_157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_173_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln232_1_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln232_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_219_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_1_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1544_1_fu_245_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_2_fu_268_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln75_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_event_recv_time_V_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_283_p6 : STD_LOGIC_VECTOR (81 downto 0);
    signal zext_ln174_fu_294_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal tmp_8_fu_298_p4 : STD_LOGIC_VECTOR (120 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lpcore_top_process_event_event_processor_prng_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component lpcore_top_process_event_g_multi_prng_generators_state_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    event_processor_prng_U : component lpcore_top_process_event_event_processor_prng_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => event_processor_prng_address0,
        ce0 => event_processor_prng_ce0,
        q0 => event_processor_prng_q0);

    g_multi_prng_generators_state_V_U : component lpcore_top_process_event_g_multi_prng_generators_state_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_multi_prng_generators_state_V_address0,
        ce0 => g_multi_prng_generators_state_V_ce0,
        we0 => g_multi_prng_generators_state_V_we0,
        d0 => g_multi_prng_generators_state_V_d0,
        q0 => g_multi_prng_generators_state_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                rhs_1_reg_356 <= rhs_1_fu_239_p2;
                rhs_reg_345 <= rhs_fu_201_p2;
                trunc_ln1544_reg_351 <= trunc_ln1544_fu_207_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                this_state_V_reg_340 <= zext_ln25_fu_152_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n, ap_CS_fsm_state4, p_read_3_read_fu_82_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (p_read_3_read_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_start = ap_const_logic_1) and (p_read2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not((((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n)
    begin
        if ((((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_assign_proc : process(p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n)
    begin
                ap_block_state4 <= (((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n, ap_CS_fsm_state4)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n, ap_CS_fsm_state4)
    begin
        if ((not((((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cancellation_unit_input_stream_blk_n_assign_proc : process(p_read2, cancellation_unit_input_stream_full_n, ap_CS_fsm_state4)
    begin
        if (((p_read2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cancellation_unit_input_stream_blk_n <= cancellation_unit_input_stream_full_n;
        else 
            cancellation_unit_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cancellation_unit_input_stream_din <= zext_ln174_1_fu_307_p1;

    cancellation_unit_input_stream_write_assign_proc : process(p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n, ap_CS_fsm_state4)
    begin
        if ((not((((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)))) and (p_read2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cancellation_unit_input_stream_write <= ap_const_logic_1;
        else 
            cancellation_unit_input_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    event_processor_prng_address0 <= zext_ln37_fu_147_p1(2 - 1 downto 0);

    event_processor_prng_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            event_processor_prng_ce0 <= ap_const_logic_1;
        else 
            event_processor_prng_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    g_multi_prng_generators_state_V_address0_assign_proc : process(this_state_V_reg_340, ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln25_fu_152_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            g_multi_prng_generators_state_V_address0 <= this_state_V_reg_340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            g_multi_prng_generators_state_V_address0 <= zext_ln25_fu_152_p1(4 - 1 downto 0);
        else 
            g_multi_prng_generators_state_V_address0 <= "XXXX";
        end if; 
    end process;


    g_multi_prng_generators_state_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            g_multi_prng_generators_state_V_ce0 <= ap_const_logic_1;
        else 
            g_multi_prng_generators_state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    g_multi_prng_generators_state_V_d0 <= ((trunc_ln1544_1_fu_245_p1 & rhs_fu_201_p2) & rhs_1_fu_239_p2);

    g_multi_prng_generators_state_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            g_multi_prng_generators_state_V_we0 <= ap_const_logic_1;
        else 
            g_multi_prng_generators_state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    new_event_recv_time_V_fu_278_p2 <= std_logic_vector(unsigned(zext_ln75_fu_274_p1) + unsigned(p_read));

    output_event_stream_blk_n_assign_proc : process(p_read2, output_event_stream_full_n, ap_CS_fsm_state4)
    begin
        if (((p_read2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_event_stream_blk_n <= output_event_stream_full_n;
        else 
            output_event_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_event_stream_din <= zext_ln174_1_fu_307_p1;

    output_event_stream_write_assign_proc : process(p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n, ap_CS_fsm_state4)
    begin
        if ((not((((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)))) and (p_read2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_event_stream_write <= ap_const_logic_1;
        else 
            output_event_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    p_read_3_read_fu_82_p2 <= p_read2;
    ret_V_2_fu_268_p3 <= (trunc_ln1544_reg_351 & rhs_reg_345);
    rhs_1_fu_239_p2 <= (xor_ln8_fu_227_p2 xor xor_ln8_1_fu_233_p2);
    rhs_fu_201_p2 <= (xor_ln232_fu_189_p2 xor xor_ln232_1_fu_195_p2);

    state_buffer_input_stream_blk_n_assign_proc : process(p_read2, state_buffer_input_stream_full_n, ap_CS_fsm_state4)
    begin
        if (((p_read2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_buffer_input_stream_blk_n <= state_buffer_input_stream_full_n;
        else 
            state_buffer_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    state_buffer_input_stream_din <= ((p_read5 & p_read) & p_read3);

    state_buffer_input_stream_write_assign_proc : process(p_read2, state_buffer_input_stream_full_n, output_event_stream_full_n, cancellation_unit_input_stream_full_n, ap_CS_fsm_state4)
    begin
        if ((not((((p_read2 = ap_const_lv1_0) and (cancellation_unit_input_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (output_event_stream_full_n = ap_const_logic_0)) or ((p_read2 = ap_const_lv1_0) and (state_buffer_input_stream_full_n = ap_const_logic_0)))) and (p_read2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_buffer_input_stream_write <= ap_const_logic_1;
        else 
            state_buffer_input_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_181_p3 <= g_multi_prng_generators_state_V_q0(3 downto 3);
    tmp_11_fu_211_p3 <= g_multi_prng_generators_state_V_q0(6 downto 6);
    tmp_12_fu_219_p3 <= g_multi_prng_generators_state_V_q0(2 downto 2);
    tmp_1_fu_283_p6 <= ((((rhs_reg_345 & rhs_1_reg_356) & p_read3) & ap_const_lv32_0) & new_event_recv_time_V_fu_278_p2);
    tmp_7_fu_165_p3 <= g_multi_prng_generators_state_V_q0(5 downto 5);
    tmp_8_fu_298_p4 <= ((ap_const_lv1_0 & zext_ln174_fu_294_p1) & p_read);
    tmp_9_fu_173_p3 <= g_multi_prng_generators_state_V_q0(4 downto 4);
    tmp_fu_157_p3 <= g_multi_prng_generators_state_V_q0(7 downto 7);
    trunc_ln1544_1_fu_245_p1 <= g_multi_prng_generators_state_V_q0(6 - 1 downto 0);
    trunc_ln1544_fu_207_p1 <= g_multi_prng_generators_state_V_q0(7 - 1 downto 0);
    xor_ln232_1_fu_195_p2 <= (tmp_7_fu_165_p3 xor tmp_10_fu_181_p3);
    xor_ln232_fu_189_p2 <= (tmp_fu_157_p3 xor tmp_9_fu_173_p3);
    xor_ln8_1_fu_233_p2 <= (tmp_9_fu_173_p3 xor tmp_10_fu_181_p3);
    xor_ln8_fu_227_p2 <= (tmp_12_fu_219_p3 xor tmp_11_fu_211_p3);
    zext_ln174_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_298_p4),129));
    zext_ln174_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_283_p6),88));
    zext_ln25_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(event_processor_prng_q0),64));
    zext_ln37_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),64));
    zext_ln75_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_268_p3),32));
end behav;
