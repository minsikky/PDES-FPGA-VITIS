// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lpcore_top_lpcore_top,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=17,HLS_SYN_DSP=0,HLS_SYN_FF=3844,HLS_SYN_LUT=6514,HLS_VERSION=2022_1}" *)

module lpcore_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init_event_stream_dout,
        init_event_stream_empty_n,
        init_event_stream_read,
        event_queue_full_stream_din,
        event_queue_full_stream_full_n,
        event_queue_full_stream_write,
        anti_message_stream_dout,
        anti_message_stream_empty_n,
        anti_message_stream_read,
        enqueue_event_stream_dout,
        enqueue_event_stream_empty_n,
        enqueue_event_stream_read,
        output_event_stream_din,
        output_event_stream_full_n,
        output_event_stream_write,
        cancellation_unit_output_stream_din,
        cancellation_unit_output_stream_full_n,
        cancellation_unit_output_stream_write,
        commit_time_stream_dout,
        commit_time_stream_empty_n,
        commit_time_stream_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [128:0] init_event_stream_dout;
input   init_event_stream_empty_n;
output   init_event_stream_read;
output  [0:0] event_queue_full_stream_din;
input   event_queue_full_stream_full_n;
output   event_queue_full_stream_write;
input  [128:0] anti_message_stream_dout;
input   anti_message_stream_empty_n;
output   anti_message_stream_read;
input  [128:0] enqueue_event_stream_dout;
input   enqueue_event_stream_empty_n;
output   enqueue_event_stream_read;
output  [128:0] output_event_stream_din;
input   output_event_stream_full_n;
output   output_event_stream_write;
output  [128:0] cancellation_unit_output_stream_din;
input   cancellation_unit_output_stream_full_n;
output   cancellation_unit_output_stream_write;
input  [31:0] commit_time_stream_dout;
input   commit_time_stream_empty_n;
output   commit_time_stream_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg init_event_stream_read;
reg event_queue_full_stream_write;
reg anti_message_stream_read;
reg enqueue_event_stream_read;
reg output_event_stream_write;
reg cancellation_unit_output_stream_write;
reg commit_time_stream_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_lpcore_kernel_0_s_fu_104_init_event_stream_read;
wire   [0:0] grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_din;
wire    grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_write;
wire    grp_lpcore_kernel_0_s_fu_104_anti_message_stream_read;
wire    grp_lpcore_kernel_0_s_fu_104_enqueue_event_stream_read;
wire   [128:0] grp_lpcore_kernel_0_s_fu_104_output_event_stream_din;
wire    grp_lpcore_kernel_0_s_fu_104_output_event_stream_write;
wire   [128:0] grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_din;
wire    grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_write;
wire    grp_lpcore_kernel_0_s_fu_104_commit_time_stream_read;
wire    grp_lpcore_kernel_0_s_fu_104_ap_start;
wire    grp_lpcore_kernel_0_s_fu_104_ap_done;
wire    grp_lpcore_kernel_0_s_fu_104_ap_ready;
wire    grp_lpcore_kernel_0_s_fu_104_ap_idle;
reg    grp_lpcore_kernel_0_s_fu_104_ap_continue;
reg    grp_lpcore_kernel_0_s_fu_104_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready;
wire    ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready;
reg    ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_lpcore_kernel_0_s_fu_104_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready = 1'b0;
#0 ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done = 1'b0;
end

lpcore_top_lpcore_kernel_0_s grp_lpcore_kernel_0_s_fu_104(
    .init_event_stream_dout(init_event_stream_dout),
    .init_event_stream_empty_n(init_event_stream_empty_n),
    .init_event_stream_read(grp_lpcore_kernel_0_s_fu_104_init_event_stream_read),
    .event_queue_full_stream_din(grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_din),
    .event_queue_full_stream_full_n(event_queue_full_stream_full_n),
    .event_queue_full_stream_write(grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_write),
    .anti_message_stream_dout(anti_message_stream_dout),
    .anti_message_stream_empty_n(anti_message_stream_empty_n),
    .anti_message_stream_read(grp_lpcore_kernel_0_s_fu_104_anti_message_stream_read),
    .enqueue_event_stream_dout(enqueue_event_stream_dout),
    .enqueue_event_stream_empty_n(enqueue_event_stream_empty_n),
    .enqueue_event_stream_read(grp_lpcore_kernel_0_s_fu_104_enqueue_event_stream_read),
    .output_event_stream_din(grp_lpcore_kernel_0_s_fu_104_output_event_stream_din),
    .output_event_stream_full_n(output_event_stream_full_n),
    .output_event_stream_write(grp_lpcore_kernel_0_s_fu_104_output_event_stream_write),
    .cancellation_unit_output_stream_din(grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_din),
    .cancellation_unit_output_stream_full_n(cancellation_unit_output_stream_full_n),
    .cancellation_unit_output_stream_write(grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_write),
    .commit_time_stream_dout(commit_time_stream_dout),
    .commit_time_stream_empty_n(commit_time_stream_empty_n),
    .commit_time_stream_read(grp_lpcore_kernel_0_s_fu_104_commit_time_stream_read),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lpcore_kernel_0_s_fu_104_ap_start),
    .ap_done(grp_lpcore_kernel_0_s_fu_104_ap_done),
    .ap_ready(grp_lpcore_kernel_0_s_fu_104_ap_ready),
    .ap_idle(grp_lpcore_kernel_0_s_fu_104_ap_idle),
    .ap_continue(grp_lpcore_kernel_0_s_fu_104_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done <= 1'b0;
        end else if ((grp_lpcore_kernel_0_s_fu_104_ap_done == 1'b1)) begin
            ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready <= 1'b0;
        end else if ((grp_lpcore_kernel_0_s_fu_104_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lpcore_kernel_0_s_fu_104_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_lpcore_kernel_0_s_fu_104_ap_start_reg <= 1'b1;
        end else if ((grp_lpcore_kernel_0_s_fu_104_ap_ready == 1'b1)) begin
            grp_lpcore_kernel_0_s_fu_104_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        anti_message_stream_read = grp_lpcore_kernel_0_s_fu_104_anti_message_stream_read;
    end else begin
        anti_message_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cancellation_unit_output_stream_write = grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_write;
    end else begin
        cancellation_unit_output_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        commit_time_stream_read = grp_lpcore_kernel_0_s_fu_104_commit_time_stream_read;
    end else begin
        commit_time_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        enqueue_event_stream_read = grp_lpcore_kernel_0_s_fu_104_enqueue_event_stream_read;
    end else begin
        enqueue_event_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        event_queue_full_stream_write = grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_write;
    end else begin
        event_queue_full_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_lpcore_kernel_0_s_fu_104_ap_continue = 1'b1;
    end else begin
        grp_lpcore_kernel_0_s_fu_104_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        init_event_stream_read = grp_lpcore_kernel_0_s_fu_104_init_event_stream_read;
    end else begin
        init_event_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_event_stream_write = grp_lpcore_kernel_0_s_fu_104_output_event_stream_write;
    end else begin
        output_event_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready & ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_done) == 1'b0);
end

assign ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_done = (grp_lpcore_kernel_0_s_fu_104_ap_done | ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_done);

assign ap_sync_grp_lpcore_kernel_0_s_fu_104_ap_ready = (grp_lpcore_kernel_0_s_fu_104_ap_ready | ap_sync_reg_grp_lpcore_kernel_0_s_fu_104_ap_ready);

assign cancellation_unit_output_stream_din = grp_lpcore_kernel_0_s_fu_104_cancellation_unit_output_stream_din;

assign event_queue_full_stream_din = grp_lpcore_kernel_0_s_fu_104_event_queue_full_stream_din;

assign grp_lpcore_kernel_0_s_fu_104_ap_start = grp_lpcore_kernel_0_s_fu_104_ap_start_reg;

assign output_event_stream_din = grp_lpcore_kernel_0_s_fu_104_output_event_stream_din;

endmodule //lpcore_top
