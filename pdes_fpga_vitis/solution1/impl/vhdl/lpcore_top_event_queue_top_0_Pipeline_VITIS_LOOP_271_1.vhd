-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lpcore_top_event_queue_top_0_Pipeline_VITIS_LOOP_271_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    current_V : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln145 : IN STD_LOGIC_VECTOR (1 downto 0);
    tmp_to_time_V : IN STD_LOGIC_VECTOR (31 downto 0);
    event_queue_buffer_next_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    event_queue_buffer_next_V_ce0 : OUT STD_LOGIC;
    event_queue_buffer_next_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_buffer_event_recv_time_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    event_queue_buffer_event_recv_time_V_ce0 : OUT STD_LOGIC;
    event_queue_buffer_event_recv_time_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    event_queue_buffer_event_recv_time_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    event_queue_buffer_event_recv_time_V_ce1 : OUT STD_LOGIC;
    event_queue_buffer_event_recv_time_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    event_queue_buffer_is_issued_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    event_queue_buffer_is_issued_V_ce0 : OUT STD_LOGIC;
    event_queue_buffer_is_issued_V_we0 : OUT STD_LOGIC;
    event_queue_buffer_is_issued_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    event_queue_buffer_is_issued_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    event_queue_unissued_size_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_unissued_size_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_unissued_size_V_o_ap_vld : OUT STD_LOGIC;
    event_queue_lp_oldest_unissued_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    event_queue_lp_oldest_unissued_V_ce0 : OUT STD_LOGIC;
    event_queue_lp_oldest_unissued_V_we0 : OUT STD_LOGIC;
    event_queue_lp_oldest_unissued_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    event_queue_lp_oldest_unissued_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of lpcore_top_event_queue_top_0_Pipeline_VITIS_LOOP_271_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1069_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal current_V_5_reg_209 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_V_5_reg_209_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal event_queue_lp_oldest_unissued_V_addr_reg_214 : STD_LOGIC_VECTOR (1 downto 0);
    signal event_queue_lp_oldest_unissued_V_addr_reg_214_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1069_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln587_3_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_3_reg_223 : STD_LOGIC_VECTOR (63 downto 0);
    signal event_queue_buffer_event_recv_time_V_load_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1081_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1081_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal event_queue_buffer_is_issued_V_addr_reg_247 : STD_LOGIC_VECTOR (6 downto 0);
    signal event_queue_buffer_is_issued_V_load_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln1065_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln145_cast_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln587_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln886_fu_169_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal current_V_3_fu_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_current_V_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1081_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op30_load_state2 : BOOLEAN;
    signal ap_enable_operation_30 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage1 : BOOLEAN;
    signal ap_predicate_op34_load_state3 : BOOLEAN;
    signal ap_enable_operation_34 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage2 : BOOLEAN;
    signal ap_predicate_op36_store_state3 : BOOLEAN;
    signal ap_enable_operation_36 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lpcore_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component lpcore_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    current_V_3_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                current_V_3_fu_44 <= current_V;
            elsif (((icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                current_V_3_fu_44 <= event_queue_buffer_next_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                current_V_5_reg_209 <= ap_sig_allocacmp_current_V_5;
                current_V_5_reg_209_pp0_iter1_reg <= current_V_5_reg_209;
                event_queue_lp_oldest_unissued_V_addr_reg_214 <= zext_ln145_cast_fu_130_p1(2 - 1 downto 0);
                event_queue_lp_oldest_unissued_V_addr_reg_214_pp0_iter1_reg <= event_queue_lp_oldest_unissued_V_addr_reg_214;
                icmp_ln1069_reg_219 <= icmp_ln1069_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                event_queue_buffer_event_recv_time_V_load_reg_238 <= event_queue_buffer_event_recv_time_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1081_fu_155_p2 = ap_const_lv1_1))) then
                event_queue_buffer_is_issued_V_addr_reg_247 <= zext_ln587_3_reg_223(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1081_reg_243 = ap_const_lv1_1))) then
                event_queue_buffer_is_issued_V_load_reg_252 <= event_queue_buffer_is_issued_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (event_queue_buffer_is_issued_V_load_reg_252 = ap_const_lv1_1) and (icmp_ln1081_reg_243 = ap_const_lv1_1))) then
                icmp_ln1065_reg_256 <= icmp_ln1065_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln1081_reg_243 <= icmp_ln1081_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1069_fu_143_p2 = ap_const_lv1_0))) then
                    zext_ln587_3_reg_223(15 downto 0) <= zext_ln587_3_fu_149_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln587_3_reg_223(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln886_fu_169_p2 <= std_logic_vector(unsigned(event_queue_unissued_size_V_i) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage2_subdone)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1069_reg_219)
    begin
        if (((icmp_ln1069_reg_219 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_30_assign_proc : process(ap_predicate_op30_load_state2)
    begin
                ap_enable_operation_30 <= (ap_predicate_op30_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_34_assign_proc : process(ap_predicate_op34_load_state3)
    begin
                ap_enable_operation_34 <= (ap_predicate_op34_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_36_assign_proc : process(ap_predicate_op36_store_state3)
    begin
                ap_enable_operation_36 <= (ap_predicate_op36_store_state3 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state2_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state2_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state3_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
                ap_enable_state3_pp0_iter0_stage2 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op30_load_state2_assign_proc : process(icmp_ln1069_reg_219, icmp_ln1081_fu_155_p2)
    begin
                ap_predicate_op30_load_state2 <= ((icmp_ln1069_reg_219 = ap_const_lv1_0) and (icmp_ln1081_fu_155_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op34_load_state3_assign_proc : process(icmp_ln1069_reg_219, icmp_ln1081_reg_243)
    begin
                ap_predicate_op34_load_state3 <= ((icmp_ln1069_reg_219 = ap_const_lv1_0) and (icmp_ln1081_reg_243 = ap_const_lv1_1));
    end process;


    ap_predicate_op36_store_state3_assign_proc : process(icmp_ln1069_reg_219, event_queue_buffer_is_issued_V_q0, icmp_ln1081_reg_243)
    begin
                ap_predicate_op36_store_state3 <= ((event_queue_buffer_is_issued_V_q0 = ap_const_lv1_1) and (icmp_ln1069_reg_219 = ap_const_lv1_0) and (icmp_ln1081_reg_243 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_current_V_5_assign_proc : process(ap_CS_fsm_pp0_stage0, current_V, ap_block_pp0_stage0, current_V_3_fu_44, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_current_V_5 <= current_V;
        else 
            ap_sig_allocacmp_current_V_5 <= current_V_3_fu_44;
        end if; 
    end process;

    event_queue_buffer_event_recv_time_V_address0 <= zext_ln587_fu_187_p1(7 - 1 downto 0);
    event_queue_buffer_event_recv_time_V_address1 <= zext_ln587_3_fu_149_p1(7 - 1 downto 0);

    event_queue_buffer_event_recv_time_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_buffer_event_recv_time_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_buffer_event_recv_time_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    event_queue_buffer_event_recv_time_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_buffer_event_recv_time_V_ce1 <= ap_const_logic_1;
        else 
            event_queue_buffer_event_recv_time_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    event_queue_buffer_is_issued_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln587_3_reg_223, event_queue_buffer_is_issued_V_addr_reg_247, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                event_queue_buffer_is_issued_V_address0 <= event_queue_buffer_is_issued_V_addr_reg_247;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                event_queue_buffer_is_issued_V_address0 <= zext_ln587_3_reg_223(7 - 1 downto 0);
            else 
                event_queue_buffer_is_issued_V_address0 <= "XXXXXXX";
            end if;
        else 
            event_queue_buffer_is_issued_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    event_queue_buffer_is_issued_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            event_queue_buffer_is_issued_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_buffer_is_issued_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_buffer_is_issued_V_d0 <= ap_const_lv1_0;

    event_queue_buffer_is_issued_V_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1069_reg_219, ap_CS_fsm_pp0_stage2, event_queue_buffer_is_issued_V_q0, icmp_ln1081_reg_243, ap_block_pp0_stage2_11001)
    begin
        if (((event_queue_buffer_is_issued_V_q0 = ap_const_lv1_1) and (icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1081_reg_243 = ap_const_lv1_1))) then 
            event_queue_buffer_is_issued_V_we0 <= ap_const_logic_1;
        else 
            event_queue_buffer_is_issued_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_buffer_next_V_address0 <= zext_ln587_3_fu_149_p1(7 - 1 downto 0);

    event_queue_buffer_next_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_buffer_next_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_buffer_next_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    event_queue_lp_oldest_unissued_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, event_queue_lp_oldest_unissued_V_addr_reg_214, event_queue_lp_oldest_unissued_V_addr_reg_214_pp0_iter1_reg, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            event_queue_lp_oldest_unissued_V_address0 <= event_queue_lp_oldest_unissued_V_addr_reg_214_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            event_queue_lp_oldest_unissued_V_address0 <= event_queue_lp_oldest_unissued_V_addr_reg_214;
        else 
            event_queue_lp_oldest_unissued_V_address0 <= "XX";
        end if; 
    end process;


    event_queue_lp_oldest_unissued_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            event_queue_lp_oldest_unissued_V_ce0 <= ap_const_logic_1;
        else 
            event_queue_lp_oldest_unissued_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_oldest_unissued_V_d0 <= current_V_5_reg_209_pp0_iter1_reg;

    event_queue_lp_oldest_unissued_V_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln1081_reg_243, event_queue_buffer_is_issued_V_load_reg_252, icmp_ln1065_reg_256, icmp_ln1081_1_fu_192_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (((icmp_ln1065_reg_256 = ap_const_lv1_1) and (event_queue_buffer_is_issued_V_load_reg_252 = ap_const_lv1_1) and (icmp_ln1081_reg_243 = ap_const_lv1_1)) or ((icmp_ln1081_1_fu_192_p2 = ap_const_lv1_1) and (event_queue_buffer_is_issued_V_load_reg_252 = ap_const_lv1_1) and (icmp_ln1081_reg_243 = ap_const_lv1_1))))) then 
            event_queue_lp_oldest_unissued_V_we0 <= ap_const_logic_1;
        else 
            event_queue_lp_oldest_unissued_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    event_queue_unissued_size_V_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1069_reg_219, ap_CS_fsm_pp0_stage2, event_queue_buffer_is_issued_V_q0, event_queue_unissued_size_V_i, icmp_ln1081_reg_243, add_ln886_fu_169_p2, ap_block_pp0_stage2)
    begin
        if (((event_queue_buffer_is_issued_V_q0 = ap_const_lv1_1) and (icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1081_reg_243 = ap_const_lv1_1))) then 
            event_queue_unissued_size_V_o <= add_ln886_fu_169_p2;
        else 
            event_queue_unissued_size_V_o <= event_queue_unissued_size_V_i;
        end if; 
    end process;


    event_queue_unissued_size_V_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1069_reg_219, ap_CS_fsm_pp0_stage2, event_queue_buffer_is_issued_V_q0, icmp_ln1081_reg_243, ap_block_pp0_stage2_11001)
    begin
        if (((event_queue_buffer_is_issued_V_q0 = ap_const_lv1_1) and (icmp_ln1069_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1081_reg_243 = ap_const_lv1_1))) then 
            event_queue_unissued_size_V_o_ap_vld <= ap_const_logic_1;
        else 
            event_queue_unissued_size_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1065_fu_181_p2 <= "1" when (event_queue_lp_oldest_unissued_V_q0 = ap_const_lv16_FFFF) else "0";
    icmp_ln1069_fu_143_p2 <= "1" when (ap_sig_allocacmp_current_V_5 = ap_const_lv16_FFFF) else "0";
    icmp_ln1081_1_fu_192_p2 <= "1" when (signed(event_queue_buffer_event_recv_time_V_q0) > signed(event_queue_buffer_event_recv_time_V_load_reg_238)) else "0";
    icmp_ln1081_fu_155_p2 <= "1" when (signed(event_queue_buffer_event_recv_time_V_q1) > signed(tmp_to_time_V)) else "0";
    zext_ln145_cast_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln145),64));
    zext_ln587_3_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_current_V_5),64));
    zext_ln587_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(event_queue_lp_oldest_unissued_V_q0),64));
end behav;
