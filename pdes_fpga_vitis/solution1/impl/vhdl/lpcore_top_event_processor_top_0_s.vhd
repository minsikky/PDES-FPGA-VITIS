-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lpcore_top_event_processor_top_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    event_processor_input_stream_dout : IN STD_LOGIC_VECTOR (208 downto 0);
    event_processor_input_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    event_processor_input_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    event_processor_input_stream_empty_n : IN STD_LOGIC;
    event_processor_input_stream_read : OUT STD_LOGIC;
    state_buffer_input_stream_din : OUT STD_LOGIC_VECTOR (79 downto 0);
    state_buffer_input_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    state_buffer_input_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    state_buffer_input_stream_full_n : IN STD_LOGIC;
    state_buffer_input_stream_write : OUT STD_LOGIC;
    output_event_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    output_event_stream_full_n : IN STD_LOGIC;
    output_event_stream_write : OUT STD_LOGIC;
    cancellation_unit_input_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    cancellation_unit_input_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    cancellation_unit_input_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    cancellation_unit_input_stream_full_n : IN STD_LOGIC;
    cancellation_unit_input_stream_write : OUT STD_LOGIC );
end;


architecture behav of lpcore_top_event_processor_top_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110001";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal event_processor_input_stream_blk_n : STD_LOGIC;
    signal tmp_nbreadreq_fu_56_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal event_is_anti_message_V_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_lp_id_V_reg_151 : STD_LOGIC_VECTOR (15 downto 0);
    signal state_rng_state_V_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal event_recv_time_V_reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_s_reg_166 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_event_fu_70_ap_start : STD_LOGIC;
    signal grp_process_event_fu_70_ap_done : STD_LOGIC;
    signal grp_process_event_fu_70_ap_idle : STD_LOGIC;
    signal grp_process_event_fu_70_ap_ready : STD_LOGIC;
    signal grp_process_event_fu_70_state_buffer_input_stream_din : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_process_event_fu_70_state_buffer_input_stream_write : STD_LOGIC;
    signal grp_process_event_fu_70_output_event_stream_din : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_process_event_fu_70_output_event_stream_write : STD_LOGIC;
    signal grp_process_event_fu_70_cancellation_unit_input_stream_din : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_process_event_fu_70_cancellation_unit_input_stream_write : STD_LOGIC;
    signal grp_process_event_fu_70_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call6 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lpcore_top_process_event IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (1 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        state_buffer_input_stream_din : OUT STD_LOGIC_VECTOR (79 downto 0);
        state_buffer_input_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        state_buffer_input_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        state_buffer_input_stream_full_n : IN STD_LOGIC;
        state_buffer_input_stream_write : OUT STD_LOGIC;
        output_event_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
        output_event_stream_full_n : IN STD_LOGIC;
        output_event_stream_write : OUT STD_LOGIC;
        cancellation_unit_input_stream_din : OUT STD_LOGIC_VECTOR (128 downto 0);
        cancellation_unit_input_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cancellation_unit_input_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cancellation_unit_input_stream_full_n : IN STD_LOGIC;
        cancellation_unit_input_stream_write : OUT STD_LOGIC );
    end component;



begin
    grp_process_event_fu_70 : component lpcore_top_process_event
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_process_event_fu_70_ap_start,
        ap_done => grp_process_event_fu_70_ap_done,
        ap_idle => grp_process_event_fu_70_ap_idle,
        ap_ready => grp_process_event_fu_70_ap_ready,
        p_read => event_recv_time_V_reg_161,
        p_read1 => trunc_ln145_s_reg_166,
        p_read2 => event_is_anti_message_V_reg_146,
        p_read3 => state_lp_id_V_reg_151,
        p_read5 => state_rng_state_V_reg_156,
        state_buffer_input_stream_din => grp_process_event_fu_70_state_buffer_input_stream_din,
        state_buffer_input_stream_num_data_valid => ap_const_lv2_0,
        state_buffer_input_stream_fifo_cap => ap_const_lv2_0,
        state_buffer_input_stream_full_n => state_buffer_input_stream_full_n,
        state_buffer_input_stream_write => grp_process_event_fu_70_state_buffer_input_stream_write,
        output_event_stream_din => grp_process_event_fu_70_output_event_stream_din,
        output_event_stream_full_n => output_event_stream_full_n,
        output_event_stream_write => grp_process_event_fu_70_output_event_stream_write,
        cancellation_unit_input_stream_din => grp_process_event_fu_70_cancellation_unit_input_stream_din,
        cancellation_unit_input_stream_num_data_valid => ap_const_lv2_0,
        cancellation_unit_input_stream_fifo_cap => ap_const_lv2_0,
        cancellation_unit_input_stream_full_n => cancellation_unit_input_stream_full_n,
        cancellation_unit_input_stream_write => grp_process_event_fu_70_cancellation_unit_input_stream_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_process_event_fu_70_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_process_event_fu_70_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (event_processor_input_stream_empty_n = ap_const_logic_0)))) and (tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_process_event_fu_70_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_process_event_fu_70_ap_ready = ap_const_logic_1)) then 
                    grp_process_event_fu_70_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                event_is_anti_message_V_reg_146 <= event_processor_input_stream_dout(128 downto 128);
                event_recv_time_V_reg_161 <= event_processor_input_stream_dout(63 downto 32);
                state_lp_id_V_reg_151 <= event_processor_input_stream_dout(144 downto 129);
                state_rng_state_V_reg_156 <= event_processor_input_stream_dout(208 downto 177);
                trunc_ln145_s_reg_166 <= event_processor_input_stream_dout(113 downto 112);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_reg_142 <= tmp_nbreadreq_fu_56_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, event_processor_input_stream_empty_n, tmp_nbreadreq_fu_56_p3, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (event_processor_input_stream_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, event_processor_input_stream_empty_n, tmp_nbreadreq_fu_56_p3)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (event_processor_input_stream_empty_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, event_processor_input_stream_empty_n, tmp_nbreadreq_fu_56_p3)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (event_processor_input_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_ignore_call6_assign_proc : process(ap_start, ap_done_reg, event_processor_input_stream_empty_n, tmp_nbreadreq_fu_56_p3)
    begin
                ap_block_state1_ignore_call6 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (event_processor_input_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(tmp_reg_142, grp_process_event_fu_70_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_process_event_fu_70_ap_done = ap_const_logic_0) and (tmp_reg_142 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cancellation_unit_input_stream_din <= grp_process_event_fu_70_cancellation_unit_input_stream_din;

    cancellation_unit_input_stream_write_assign_proc : process(tmp_reg_142, grp_process_event_fu_70_cancellation_unit_input_stream_write, ap_CS_fsm_state2)
    begin
        if (((tmp_reg_142 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cancellation_unit_input_stream_write <= grp_process_event_fu_70_cancellation_unit_input_stream_write;
        else 
            cancellation_unit_input_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    event_processor_input_stream_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, event_processor_input_stream_empty_n, tmp_nbreadreq_fu_56_p3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            event_processor_input_stream_blk_n <= event_processor_input_stream_empty_n;
        else 
            event_processor_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    event_processor_input_stream_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, event_processor_input_stream_empty_n, tmp_nbreadreq_fu_56_p3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (event_processor_input_stream_empty_n = ap_const_logic_0)))) and (tmp_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            event_processor_input_stream_read <= ap_const_logic_1;
        else 
            event_processor_input_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_process_event_fu_70_ap_start <= grp_process_event_fu_70_ap_start_reg;
    output_event_stream_din <= grp_process_event_fu_70_output_event_stream_din;

    output_event_stream_write_assign_proc : process(tmp_reg_142, grp_process_event_fu_70_output_event_stream_write, ap_CS_fsm_state2)
    begin
        if (((tmp_reg_142 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_event_stream_write <= grp_process_event_fu_70_output_event_stream_write;
        else 
            output_event_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    state_buffer_input_stream_din <= grp_process_event_fu_70_state_buffer_input_stream_din;

    state_buffer_input_stream_write_assign_proc : process(tmp_reg_142, grp_process_event_fu_70_state_buffer_input_stream_write, ap_CS_fsm_state2)
    begin
        if (((tmp_reg_142 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_buffer_input_stream_write <= grp_process_event_fu_70_state_buffer_input_stream_write;
        else 
            state_buffer_input_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_56_p3 <= (0=>(event_processor_input_stream_empty_n), others=>'-');
end behav;
