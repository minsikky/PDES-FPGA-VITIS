-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simulation_top_event_queue_top_0_Pipeline_VITIS_LOOP_205_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    earliest_lp_V_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    earliest_lp_V_out_ap_vld : OUT STD_LOGIC;
    event_queue_lp_oldest_unissued_V_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    event_queue_lp_oldest_unissued_V_1_ce0 : OUT STD_LOGIC;
    event_queue_lp_oldest_unissued_V_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    event_queue_buffer_event_recv_time_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    event_queue_buffer_event_recv_time_V_1_ce0 : OUT STD_LOGIC;
    event_queue_buffer_event_recv_time_V_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of simulation_top_event_queue_top_0_Pipeline_VITIS_LOOP_205_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1073_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_V_2_reg_222 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_2_reg_222_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1073_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_reg_227_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal event_queue_lp_oldest_unissued_V_1_load_reg_236 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_cast_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln587_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal earliest_time_V_fu_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal earliest_time_V_2_fu_175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal earliest_lp_V_fu_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal earliest_lp_V_5_fu_183_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_fu_48 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln886_fu_109_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_V_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1073_2_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln209_fu_160_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln209_fu_163_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1069_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_fu_152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln209_2_fu_167_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component simulation_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component simulation_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    earliest_lp_V_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    earliest_lp_V_fu_44 <= ap_const_lv16_0;
                elsif (((icmp_ln1073_reg_227_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    earliest_lp_V_fu_44 <= earliest_lp_V_5_fu_183_p3;
                end if;
            end if; 
        end if;
    end process;

    earliest_time_V_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    earliest_time_V_fu_40 <= ap_const_lv32_7FFFFFFF;
                elsif (((icmp_ln1073_reg_227_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    earliest_time_V_fu_40 <= earliest_time_V_2_fu_175_p3;
                end if;
            end if; 
        end if;
    end process;

    i_V_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1073_fu_103_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_V_fu_48 <= add_ln886_fu_109_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_48 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_V_2_reg_222 <= ap_sig_allocacmp_i_V_2;
                i_V_2_reg_222_pp0_iter1_reg <= i_V_2_reg_222;
                icmp_ln1073_reg_227 <= icmp_ln1073_fu_103_p2;
                icmp_ln1073_reg_227_pp0_iter1_reg <= icmp_ln1073_reg_227;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_reg_227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                event_queue_lp_oldest_unissued_V_1_load_reg_236 <= event_queue_lp_oldest_unissued_V_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln886_fu_109_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V_2) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1073_fu_103_p2)
    begin
        if (((icmp_ln1073_fu_103_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_V_fu_48)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_V_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_V_2 <= i_V_fu_48;
        end if; 
    end process;

    earliest_lp_V_5_fu_183_p3 <= 
        earliest_lp_V_fu_44 when (icmp_ln1069_fu_141_p2(0) = '1') else 
        select_ln209_2_fu_167_p3;
    earliest_lp_V_out <= earliest_lp_V_fu_44(2 - 1 downto 0);

    earliest_lp_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1073_reg_227_pp0_iter1_reg)
    begin
        if (((icmp_ln1073_reg_227_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            earliest_lp_V_out_ap_vld <= ap_const_logic_1;
        else 
            earliest_lp_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    earliest_time_V_2_fu_175_p3 <= 
        earliest_time_V_fu_40 when (icmp_ln1069_fu_141_p2(0) = '1') else 
        select_ln209_fu_152_p3;
    event_queue_buffer_event_recv_time_V_1_address0 <= zext_ln587_fu_125_p1(7 - 1 downto 0);

    event_queue_buffer_event_recv_time_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_buffer_event_recv_time_V_1_ce0 <= ap_const_logic_1;
        else 
            event_queue_buffer_event_recv_time_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    event_queue_lp_oldest_unissued_V_1_address0 <= i_V_cast_fu_115_p1(2 - 1 downto 0);

    event_queue_lp_oldest_unissued_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            event_queue_lp_oldest_unissued_V_1_ce0 <= ap_const_logic_1;
        else 
            event_queue_lp_oldest_unissued_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_cast_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_V_2),64));
    icmp_ln1069_fu_141_p2 <= "1" when (event_queue_lp_oldest_unissued_V_1_load_reg_236 = ap_const_lv16_FFFF) else "0";
    icmp_ln1073_2_fu_146_p2 <= "1" when (signed(earliest_time_V_fu_40) > signed(event_queue_buffer_event_recv_time_V_1_q0)) else "0";
    icmp_ln1073_fu_103_p2 <= "1" when (ap_sig_allocacmp_i_V_2 = ap_const_lv3_4) else "0";
    select_ln209_2_fu_167_p3 <= 
        zext_ln209_fu_163_p1 when (icmp_ln1073_2_fu_146_p2(0) = '1') else 
        earliest_lp_V_fu_44;
    select_ln209_fu_152_p3 <= 
        event_queue_buffer_event_recv_time_V_1_q0 when (icmp_ln1073_2_fu_146_p2(0) = '1') else 
        earliest_time_V_fu_40;
    trunc_ln209_fu_160_p1 <= i_V_2_reg_222_pp0_iter1_reg(2 - 1 downto 0);
    zext_ln209_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln209_fu_160_p1),16));
    zext_ln587_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(event_queue_lp_oldest_unissued_V_1_q0),64));
end behav;
