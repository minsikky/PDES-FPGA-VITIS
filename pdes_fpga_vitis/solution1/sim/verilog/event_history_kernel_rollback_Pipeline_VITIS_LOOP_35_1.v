// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module event_history_kernel_rollback_Pipeline_VITIS_LOOP_35_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln1077,
        temp_recv_time_V,
        index_V_1_out,
        index_V_1_out_ap_vld,
        index_V_3_out,
        index_V_3_out_ap_vld,
        event_queue_heap_recv_time_V_address0,
        event_queue_heap_recv_time_V_ce0,
        event_queue_heap_recv_time_V_we0,
        event_queue_heap_recv_time_V_d0,
        event_queue_heap_recv_time_V_q0,
        event_queue_heap_send_time_V_address0,
        event_queue_heap_send_time_V_ce0,
        event_queue_heap_send_time_V_we0,
        event_queue_heap_send_time_V_d0,
        event_queue_heap_send_time_V_q0,
        event_queue_heap_data_V_address0,
        event_queue_heap_data_V_ce0,
        event_queue_heap_data_V_we0,
        event_queue_heap_data_V_d0,
        event_queue_heap_data_V_q0,
        event_queue_heap_sender_id_V_address0,
        event_queue_heap_sender_id_V_ce0,
        event_queue_heap_sender_id_V_we0,
        event_queue_heap_sender_id_V_d0,
        event_queue_heap_sender_id_V_q0,
        event_queue_heap_receiver_id_V_address0,
        event_queue_heap_receiver_id_V_ce0,
        event_queue_heap_receiver_id_V_we0,
        event_queue_heap_receiver_id_V_d0,
        event_queue_heap_receiver_id_V_q0,
        event_queue_heap_is_anti_message_V_address0,
        event_queue_heap_is_anti_message_V_ce0,
        event_queue_heap_is_anti_message_V_we0,
        event_queue_heap_is_anti_message_V_d0,
        event_queue_heap_is_anti_message_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] zext_ln1077;
input  [31:0] temp_recv_time_V;
output  [6:0] index_V_1_out;
output   index_V_1_out_ap_vld;
output  [6:0] index_V_3_out;
output   index_V_3_out_ap_vld;
output  [6:0] event_queue_heap_recv_time_V_address0;
output   event_queue_heap_recv_time_V_ce0;
output   event_queue_heap_recv_time_V_we0;
output  [31:0] event_queue_heap_recv_time_V_d0;
input  [31:0] event_queue_heap_recv_time_V_q0;
output  [6:0] event_queue_heap_send_time_V_address0;
output   event_queue_heap_send_time_V_ce0;
output   event_queue_heap_send_time_V_we0;
output  [31:0] event_queue_heap_send_time_V_d0;
input  [31:0] event_queue_heap_send_time_V_q0;
output  [6:0] event_queue_heap_data_V_address0;
output   event_queue_heap_data_V_ce0;
output   event_queue_heap_data_V_we0;
output  [31:0] event_queue_heap_data_V_d0;
input  [31:0] event_queue_heap_data_V_q0;
output  [6:0] event_queue_heap_sender_id_V_address0;
output   event_queue_heap_sender_id_V_ce0;
output   event_queue_heap_sender_id_V_we0;
output  [15:0] event_queue_heap_sender_id_V_d0;
input  [15:0] event_queue_heap_sender_id_V_q0;
output  [6:0] event_queue_heap_receiver_id_V_address0;
output   event_queue_heap_receiver_id_V_ce0;
output   event_queue_heap_receiver_id_V_we0;
output  [15:0] event_queue_heap_receiver_id_V_d0;
input  [15:0] event_queue_heap_receiver_id_V_q0;
output  [6:0] event_queue_heap_is_anti_message_V_address0;
output   event_queue_heap_is_anti_message_V_ce0;
output   event_queue_heap_is_anti_message_V_we0;
output  [0:0] event_queue_heap_is_anti_message_V_d0;
input  [0:0] event_queue_heap_is_anti_message_V_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] index_V_1_out;
reg index_V_1_out_ap_vld;
reg index_V_3_out_ap_vld;
reg[6:0] event_queue_heap_recv_time_V_address0;
reg event_queue_heap_recv_time_V_ce0;
reg event_queue_heap_recv_time_V_we0;
reg[6:0] event_queue_heap_send_time_V_address0;
reg event_queue_heap_send_time_V_ce0;
reg event_queue_heap_send_time_V_we0;
reg[6:0] event_queue_heap_data_V_address0;
reg event_queue_heap_data_V_ce0;
reg event_queue_heap_data_V_we0;
reg[6:0] event_queue_heap_sender_id_V_address0;
reg event_queue_heap_sender_id_V_ce0;
reg event_queue_heap_sender_id_V_we0;
reg[6:0] event_queue_heap_receiver_id_V_address0;
reg event_queue_heap_receiver_id_V_ce0;
reg event_queue_heap_receiver_id_V_we0;
reg[6:0] event_queue_heap_is_anti_message_V_address0;
reg event_queue_heap_is_anti_message_V_ce0;
reg event_queue_heap_is_anti_message_V_we0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] index_V_1_reg_424;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] empty_fu_275_p1;
reg   [6:0] empty_reg_429;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln1065_fu_279_p2;
reg   [0:0] icmp_ln1065_reg_434;
wire   [15:0] parent_V_fu_335_p3;
reg   [15:0] parent_V_reg_438;
wire   [63:0] zext_ln587_fu_343_p1;
reg   [63:0] zext_ln587_reg_443;
wire   [0:0] icmp_ln1073_fu_357_p2;
reg   [0:0] icmp_ln1073_reg_457;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln587_1_fu_362_p1;
reg   [63:0] zext_ln587_1_reg_461;
wire   [0:0] or_cond_fu_386_p2;
wire   [6:0] trunc_ln31_fu_400_p1;
reg   [6:0] trunc_ln31_reg_499;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran4to5_state3;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_cleanup_dest_slot_0_i_i_phi_fu_238_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_cleanup_dest_slot_0_i_i_reg_235;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_250_p4;
reg   [0:0] UnifiedRetVal_reg_246;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [31:0] i_fu_68;
wire   [31:0] i_2_fu_351_p2;
reg   [15:0] index_V_fu_72;
wire   [15:0] zext_ln1077_cast_fu_258_p1;
wire   [16:0] zext_ln1559_fu_285_p1;
wire   [16:0] add_ln1559_fu_289_p2;
wire   [16:0] sub_ln1559_fu_303_p2;
wire   [15:0] trunc_ln1559_1_fu_309_p4;
wire   [0:0] tmp_fu_295_p3;
wire   [15:0] sub_ln1559_1_fu_319_p2;
wire   [15:0] trunc_ln1559_2_fu_325_p4;
wire   [24:0] tmp_1_fu_370_p4;
wire   [0:0] icmp_ln35_fu_380_p2;
reg   [0:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg   [1:0] ap_exit_tran_regpp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_250_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1065_reg_434 == 1'd0))) begin
        UnifiedRetVal_reg_246 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_246 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((icmp_ln1065_reg_434 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
        end else if ((ap_predicate_tran4to5_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_68 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_cond_fu_386_p2 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_fu_68 <= i_2_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_V_fu_72 <= zext_ln1077_cast_fu_258_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1073_fu_357_p2 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        index_V_fu_72 <= parent_V_reg_438;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        empty_reg_429 <= empty_fu_275_p1;
        icmp_ln1065_reg_434 <= icmp_ln1065_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        icmp_ln1073_reg_457 <= icmp_ln1073_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_V_1_reg_424 <= index_V_fu_72;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1065_fu_279_p2 == 1'd0))) begin
        parent_V_reg_438 <= parent_V_fu_335_p3;
        zext_ln587_reg_443[15 : 0] <= zext_ln587_fu_343_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        trunc_ln31_reg_499 <= trunc_ln31_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1073_fu_357_p2 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        zext_ln587_1_reg_461[15 : 0] <= zext_ln587_1_fu_362_p1[15 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((ap_predicate_tran4to5_state3 == 1'b1) | (icmp_ln1065_reg_434 == 1'd1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1065_reg_434 == 1'd0))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_250_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_250_p4 = UnifiedRetVal_reg_246;
    end
end

always @ (*) begin
    if ((icmp_ln1065_reg_434 == 1'd0)) begin
        if ((icmp_ln1073_fu_357_p2 == 1'd0)) begin
            ap_phi_mux_cleanup_dest_slot_0_i_i_phi_fu_238_p4 = 1'd0;
        end else if ((icmp_ln1073_fu_357_p2 == 1'd1)) begin
            ap_phi_mux_cleanup_dest_slot_0_i_i_phi_fu_238_p4 = 1'd1;
        end else begin
            ap_phi_mux_cleanup_dest_slot_0_i_i_phi_fu_238_p4 = ap_phi_reg_pp0_iter0_cleanup_dest_slot_0_i_i_reg_235;
        end
    end else begin
        ap_phi_mux_cleanup_dest_slot_0_i_i_phi_fu_238_p4 = ap_phi_reg_pp0_iter0_cleanup_dest_slot_0_i_i_reg_235;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_250_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        event_queue_heap_data_V_address0 = zext_ln587_1_reg_461;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        event_queue_heap_data_V_address0 = zext_ln587_reg_443;
    end else begin
        event_queue_heap_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        event_queue_heap_data_V_ce0 = 1'b1;
    end else begin
        event_queue_heap_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1073_reg_457 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        event_queue_heap_data_V_we0 = 1'b1;
    end else begin
        event_queue_heap_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        event_queue_heap_is_anti_message_V_address0 = zext_ln587_1_reg_461;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        event_queue_heap_is_anti_message_V_address0 = zext_ln587_reg_443;
    end else begin
        event_queue_heap_is_anti_message_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        event_queue_heap_is_anti_message_V_ce0 = 1'b1;
    end else begin
        event_queue_heap_is_anti_message_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1073_reg_457 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        event_queue_heap_is_anti_message_V_we0 = 1'b1;
    end else begin
        event_queue_heap_is_anti_message_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        event_queue_heap_receiver_id_V_address0 = zext_ln587_1_reg_461;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        event_queue_heap_receiver_id_V_address0 = zext_ln587_reg_443;
    end else begin
        event_queue_heap_receiver_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        event_queue_heap_receiver_id_V_ce0 = 1'b1;
    end else begin
        event_queue_heap_receiver_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1073_reg_457 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        event_queue_heap_receiver_id_V_we0 = 1'b1;
    end else begin
        event_queue_heap_receiver_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            event_queue_heap_recv_time_V_address0 = zext_ln587_1_fu_362_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            event_queue_heap_recv_time_V_address0 = zext_ln587_fu_343_p1;
        end else begin
            event_queue_heap_recv_time_V_address0 = 'bx;
        end
    end else begin
        event_queue_heap_recv_time_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        event_queue_heap_recv_time_V_ce0 = 1'b1;
    end else begin
        event_queue_heap_recv_time_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1073_fu_357_p2 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        event_queue_heap_recv_time_V_we0 = 1'b1;
    end else begin
        event_queue_heap_recv_time_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        event_queue_heap_send_time_V_address0 = zext_ln587_1_reg_461;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        event_queue_heap_send_time_V_address0 = zext_ln587_reg_443;
    end else begin
        event_queue_heap_send_time_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        event_queue_heap_send_time_V_ce0 = 1'b1;
    end else begin
        event_queue_heap_send_time_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1073_reg_457 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        event_queue_heap_send_time_V_we0 = 1'b1;
    end else begin
        event_queue_heap_send_time_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        event_queue_heap_sender_id_V_address0 = zext_ln587_1_reg_461;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        event_queue_heap_sender_id_V_address0 = zext_ln587_reg_443;
    end else begin
        event_queue_heap_sender_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        event_queue_heap_sender_id_V_ce0 = 1'b1;
    end else begin
        event_queue_heap_sender_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1073_reg_457 == 1'd1) & (icmp_ln1065_reg_434 == 1'd0))) begin
        event_queue_heap_sender_id_V_we0 = 1'b1;
    end else begin
        event_queue_heap_sender_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        index_V_1_out = 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1065_reg_434 == 1'd0))) begin
        index_V_1_out = empty_reg_429;
    end else begin
        index_V_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln1065_reg_434 == 1'd0)))) begin
        index_V_1_out_ap_vld = 1'b1;
    end else begin
        index_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1065_reg_434 == 1'd0))) begin
        index_V_3_out_ap_vld = 1'b1;
    end else begin
        index_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_exit_tran_regpp0 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_exit_tran_regpp0 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1559_fu_289_p2 = ($signed(zext_ln1559_fu_285_p1) + $signed(17'd131071));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_cleanup_dest_slot_0_i_i_reg_235 = 'bx;

always @ (*) begin
    ap_predicate_tran4to5_state3 = ((or_cond_fu_386_p2 == 1'd0) & (icmp_ln1065_reg_434 == 1'd0));
end

assign empty_fu_275_p1 = index_V_fu_72[6:0];

assign event_queue_heap_data_V_d0 = event_queue_heap_data_V_q0;

assign event_queue_heap_is_anti_message_V_d0 = event_queue_heap_is_anti_message_V_q0;

assign event_queue_heap_receiver_id_V_d0 = event_queue_heap_receiver_id_V_q0;

assign event_queue_heap_recv_time_V_d0 = event_queue_heap_recv_time_V_q0;

assign event_queue_heap_send_time_V_d0 = event_queue_heap_send_time_V_q0;

assign event_queue_heap_sender_id_V_d0 = event_queue_heap_sender_id_V_q0;

assign i_2_fu_351_p2 = (i_fu_68 + 32'd1);

assign icmp_ln1065_fu_279_p2 = ((index_V_fu_72 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_357_p2 = (($signed(temp_recv_time_V) < $signed(event_queue_heap_recv_time_V_q0)) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_380_p2 = (($signed(tmp_1_fu_370_p4) < $signed(25'd1)) ? 1'b1 : 1'b0);

assign index_V_3_out = trunc_ln31_reg_499;

assign or_cond_fu_386_p2 = (icmp_ln35_fu_380_p2 & ap_phi_mux_cleanup_dest_slot_0_i_i_phi_fu_238_p4);

assign parent_V_fu_335_p3 = ((tmp_fu_295_p3[0:0] == 1'b1) ? sub_ln1559_1_fu_319_p2 : trunc_ln1559_2_fu_325_p4);

assign sub_ln1559_1_fu_319_p2 = (16'd0 - trunc_ln1559_1_fu_309_p4);

assign sub_ln1559_fu_303_p2 = (17'd1 - zext_ln1559_fu_285_p1);

assign tmp_1_fu_370_p4 = {{i_2_fu_351_p2[31:7]}};

assign tmp_fu_295_p3 = add_ln1559_fu_289_p2[32'd16];

assign trunc_ln1559_1_fu_309_p4 = {{sub_ln1559_fu_303_p2[16:1]}};

assign trunc_ln1559_2_fu_325_p4 = {{add_ln1559_fu_289_p2[16:1]}};

assign trunc_ln31_fu_400_p1 = index_V_fu_72[6:0];

assign zext_ln1077_cast_fu_258_p1 = zext_ln1077;

assign zext_ln1559_fu_285_p1 = index_V_fu_72;

assign zext_ln587_1_fu_362_p1 = index_V_1_reg_424;

assign zext_ln587_fu_343_p1 = parent_V_fu_335_p3;

always @ (posedge ap_clk) begin
    zext_ln587_reg_443[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln587_1_reg_461[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    ap_exit_tran_regpp0[1] <= 1'b0;
end

endmodule //event_history_kernel_rollback_Pipeline_VITIS_LOOP_35_1
